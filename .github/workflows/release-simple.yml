name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run mode (skip PyPI publish)'
        type: boolean
        default: true
      tag:
        description: 'Tag to release (e.g., v1.4.23)'
        required: false
        type: string

# Minimal permissions, elevated only where needed
permissions:
  contents: read

jobs:
  # Build and test release artifacts
  build:
    name: Build Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Extract version
        id: version
        run: |
          # Get version from __version__.py
          PACKAGE_VERSION=$(python -c "exec(open('src/rxiv_maker/__version__.py').read()); print(__version__)")
          echo "Package version: $PACKAGE_VERSION"

          # Determine tag based on trigger
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.tag }}" ]; then
              TAG="${{ inputs.tag }}"
            else
              TAG="v${PACKAGE_VERSION}"
            fi
            echo "Using manual tag: $TAG"
          else
            TAG="${GITHUB_REF_NAME}"
            echo "Using pushed tag: $TAG"
          fi

          VERSION="${TAG#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Building release for version: $VERSION (tag: $TAG)"

      - name: Build package
        run: |
          echo "üì¶ Building Python package..."
          uv build
          echo "‚úÖ Package built successfully"

          # Display package info
          ls -la dist/
          echo ""
          echo "Package contents:"
          for file in dist/*; do
            echo "  - $(basename $file): $(stat -c%s $file 2>/dev/null || stat -f%z $file) bytes"
          done

      - name: Check package
        run: |
          echo "üîç Checking package integrity..."
          pip install --upgrade twine
          twine check dist/*
          echo "‚úÖ Package validation passed"

      - name: Test package installation
        run: |
          echo "üß™ Testing package installation..."
          python -m venv test-env
          source test-env/bin/activate 2>/dev/null || test-env\\Scripts\\activate
          pip install dist/*.whl
          rxiv --version
          echo "‚úÖ Package installs and runs correctly"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Create GitHub release
  github-release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    permissions:
      contents: write  # Required for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Generate release notes
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="${{ needs.build.outputs.tag }}"

          # Get commit messages since last tag
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$TAG" | head -1 || echo "")

          cat > release_notes.md << EOF
          ## üöÄ Rxiv-Maker ${TAG}

          ### üì¶ Installation

          \`\`\`bash
          pip install rxiv-maker==${VERSION}
          \`\`\`

          ### üîó Quick Start
          \`\`\`bash
          rxiv init my-paper
          cd my-paper
          rxiv pdf
          \`\`\`

          ### üìù Changes
          EOF

          if [ -n "$PREV_TAG" ]; then
            echo "" >> release_notes.md
            echo "Commits since $PREV_TAG:" >> release_notes.md
            git log --oneline --no-merges ${PREV_TAG}..HEAD | head -20 >> release_notes.md
          fi

          cat >> release_notes.md << EOF

          ### üìñ Documentation
          - [Installation Guide](https://github.com/henriqueslab/rxiv-maker#installation)
          - [User Guide](https://github.com/henriqueslab/rxiv-maker#usage)

          ---
          *This release was automatically created from tag ${TAG}*
          EOF

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "" >> release_notes.md
            echo "**‚ö†Ô∏è This is a test release (dry-run mode)**" >> release_notes.md
          fi

      - name: Create or update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.build.outputs.tag }}"

          # Check if release already exists
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "üìù Updating existing release $TAG..."
            gh release upload "$TAG" dist/* --clobber
          else
            echo "üéâ Creating new release $TAG..."
            gh release create "$TAG" \
              --title "Rxiv-Maker $TAG" \
              --notes-file release_notes.md \
              dist/*
          fi

  # Build and publish Docker images
  docker:
    name: Build & Publish Docker Images
    runs-on: ubuntu-latest
    needs: [build, pypi]
    timeout-minutes: 60  # Increased for ARM64 builds with R packages
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PUSH }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: henriqueslab/rxiv-maker-base
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Rxiv-Maker Base
            org.opencontainers.image.description=Base Docker image for rxiv-maker with runtime dependency injection
            org.opencontainers.image.vendor=Rxiv-Maker Project
            org.opencontainers.image.version=${{ needs.build.outputs.version }}

      - name: Build and push Docker images
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/docker/images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test released Docker image
        run: |
          echo "üß™ Testing released Docker image..."
          VERSION="${{ needs.build.outputs.version }}"

          # Test the versioned image
          docker run --rm henriqueslab/rxiv-maker-base:${VERSION} python3 -c "
          import sys
          print(f'‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')

          # Test essential dependencies
          import platformdirs, click, rich, packaging
          print('‚úÖ Essential dependencies available')
          "

          # Test runtime dependency injection
          docker run --rm -v $PWD:/workspace henriqueslab/rxiv-maker-base:${VERSION} bash -c "
          if [ -x /usr/local/bin/install-project-deps.sh ]; then
              echo '‚úÖ Runtime dependency injection available'
          else
              echo '‚ùå Runtime dependency injection missing'
              exit 1
          fi
          "

          echo "‚úÖ Docker image tests passed"

  # Publish to PyPI using OIDC (no API tokens!)
  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, github-release]
    # Only publish on tag push or when explicitly not in dry-run mode
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry-run == 'false')
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/project/rxiv-maker
    permissions:
      id-token: write  # Required for OIDC

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Display package info
        run: |
          echo "üì¶ Packages to publish:"
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true  # Enable attestations for supply chain security
          verbose: true
          skip-existing: true  # Don't fail if version already exists

  # Update Homebrew Formula
  homebrew-update:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [build, pypi]
    if: needs.pypi.result == 'success' && !inputs.dry-run
    timeout-minutes: 10
    permissions:
      contents: write  # Required for updating homebrew repo

    steps:
      - name: Update Homebrew formula
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT }}
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="v${VERSION}"
          echo "Updating Homebrew formula for version ${VERSION}..."

          # Use GitHub release tarball instead of PyPI
          TARBALL_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${TAG}.tar.gz"
          echo "üì¶ Release tarball URL: ${TARBALL_URL}"

          # Download and calculate SHA256 hash
          echo "‚¨áÔ∏è Downloading release tarball..."
          curl -L -o "rxiv-maker-${VERSION}.tar.gz" "${TARBALL_URL}"
          SHA256=$(sha256sum "rxiv-maker-${VERSION}.tar.gz" | cut -d' ' -f1)
          echo "üîí SHA256: ${SHA256}"

          # Clone homebrew tap repo
          git clone https://x-access-token:${{ secrets.DISPATCH_PAT }}@github.com/HenriquesLab/homebrew-rxiv-maker.git homebrew-tap
          cd homebrew-tap

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create new branch for the update
          BRANCH_NAME="auto-update-v${VERSION}"
          git checkout -b "${BRANCH_NAME}"

          # Update formula with GitHub release URL
          sed -i.bak "s|url \".*\"|url \"${TARBALL_URL}\"|" Formula/rxiv-maker.rb
          sed -i.bak "s|sha256 \".*\"|sha256 \"${SHA256}\"|" Formula/rxiv-maker.rb
          rm Formula/rxiv-maker.rb.bak

          # Show the changes
          echo "üìã Formula changes:"
          git diff Formula/rxiv-maker.rb

          # Commit and create pull request
          git add Formula/rxiv-maker.rb
          git commit -m "chore: update rxiv-maker to v${VERSION}

          Auto-generated update from rxiv-maker release v${VERSION}

          - Updated URL to new release tarball
          - Updated SHA256 hash: ${SHA256}

          ü§ñ Generated by GitHub Actions from ${{ github.repository }}"

          # Push branch
          git push origin "${BRANCH_NAME}"

          # Create pull request using GitHub CLI
          gh pr create \
            --repo HenriquesLab/homebrew-rxiv-maker \
            --title "üöÄ Auto-update rxiv-maker to v${VERSION}" \
            --body "$(cat <<'EOF'
          ## üì¶ Automatic Formula Update

          This PR automatically updates the rxiv-maker Homebrew formula to version **v${VERSION}**.

          ### üîÑ Changes Made
          - ‚úÖ Updated release URL to: \`${TARBALL_URL}\`
          - ‚úÖ Updated SHA256 hash to: \`${SHA256}\`

          ### ÔøΩ Testing
          After merging, the formula can be tested with:
          \`\`\`bash
          brew tap HenriquesLab/rxiv-maker
          brew install rxiv-maker
          rxiv --version
          \`\`\`

          ### ü§ñ Automation
          This PR was automatically generated by the [rxiv-maker repository](https://github.com/${{ github.repository }}) GitHub Actions workflow.

          **Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${VERSION}
          **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF
          )" \
            --head "${BRANCH_NAME}" \
            --base main

          echo "‚úÖ Homebrew formula update PR created successfully"

  # APT Repository Update
  apt-repository:
    name: Update APT Repository
    uses: ./.github/workflows/publish-apt.yml
    needs: [build, pypi]
    if: needs.pypi.result == 'success' && !inputs.dry-run
    permissions:
      contents: write  # Required for pushing to apt-repo branch
    with:
      version: ${{ needs.build.outputs.version }}
      dry-run: false
    secrets:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  # Summary
  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [build, github-release, docker, pypi, homebrew-update, apt-repository]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate summary
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="${{ needs.build.outputs.tag }}"

          echo "# üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.dry-run }}" = "true" ]; then
            echo "**Mode**: üß™ Dry-run (PyPI publish skipped)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Mode**: üöÄ Production release" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check job statuses
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "‚úÖ **Build**: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.github-release.result }}" == "success" ]; then
            echo "‚úÖ **GitHub Release**: Created/Updated" >> $GITHUB_STEP_SUMMARY
            echo "   - [View Release](https://github.com/${{ github.repository }}/releases/tag/${TAG})" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **GitHub Release**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.pypi.result }}" == "success" ]; then
            echo "‚úÖ **PyPI**: Published" >> $GITHUB_STEP_SUMMARY
            echo "   - [View on PyPI](https://pypi.org/project/rxiv-maker/${VERSION}/)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.pypi.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **PyPI**: Skipped (dry-run or not triggered)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **PyPI**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docker.result }}" == "success" ]; then
            echo "‚úÖ **Docker**: Published to Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "   - [View on Docker Hub](https://hub.docker.com/r/henriqueslab/rxiv-maker-base)" >> $GITHUB_STEP_SUMMARY
            echo "   - Tags: \`henriqueslab/rxiv-maker-base:${VERSION}\`, \`henriqueslab/rxiv-maker-base:latest\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Docker**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.homebrew-update.result }}" == "success" ]; then
            echo "‚úÖ **Homebrew**: Formula Updated" >> $GITHUB_STEP_SUMMARY
            echo "   - [View Tap](https://github.com/HenriquesLab/homebrew-rxiv-maker)" >> $GITHUB_STEP_SUMMARY
            echo "   - Install: \`brew install henriqueslab/rxiv-maker/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.homebrew-update.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Homebrew**: Skipped (dry-run or PyPI failed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Homebrew**: Failed to update formula" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.apt-repository.result }}" == "success" ]; then
            echo "‚úÖ **APT Repository**: Updated" >> $GITHUB_STEP_SUMMARY
            echo "   - [View Repository](https://henriqueslab.github.io/rxiv-maker/)" >> $GITHUB_STEP_SUMMARY
            echo "   - Install: \`sudo apt update && sudo apt install rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.apt-repository.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **APT Repository**: Skipped (dry-run or PyPI failed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **APT Repository**: Failed to update" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Python Package" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pypi.result }}" == "success" ]; then
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "pip install rxiv-maker==${VERSION}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "Install from GitHub release:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "pip install https://github.com/${{ github.repository }}/releases/download/${TAG}/rxiv_maker-${VERSION}-py3-none-any.whl" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docker.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Docker Image" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Development mode with runtime dependency injection" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --rm -v \$PWD:/workspace henriqueslab/rxiv-maker-base:${VERSION} dev-mode.sh" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Or use latest tag" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --rm -v \$PWD:/workspace henriqueslab/rxiv-maker-base:latest dev-mode.sh" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.apt-repository.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### APT Repository (Ubuntu/Debian)" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Add GPG key and repository (one-time setup)" >> $GITHUB_STEP_SUMMARY
            echo "curl -fsSL https://raw.githubusercontent.com/henriqueslab/rxiv-maker/apt-repo/pubkey.gpg | sudo gpg --dearmor -o /usr/share/keyrings/rxiv-maker.gpg" >> $GITHUB_STEP_SUMMARY
            echo 'echo "deb [signed-by=/usr/share/keyrings/rxiv-maker.gpg] https://henriqueslab.github.io/rxiv-maker/ stable main" | sudo tee /etc/apt/sources.list.d/rxiv-maker.list' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Install rxiv-maker with all dependencies" >> $GITHUB_STEP_SUMMARY
            echo "sudo apt update && sudo apt install rxiv-maker" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.homebrew-update.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Homebrew (macOS/Linux)" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Add the tap (one-time setup)" >> $GITHUB_STEP_SUMMARY
            echo "brew tap henriqueslab/rxiv-maker" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Install rxiv-maker with all dependencies" >> $GITHUB_STEP_SUMMARY
            echo "brew install rxiv-maker" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üîó Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${TAG})" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.pypi.result }}" == "success" ]; then
            echo "- [PyPI Package](https://pypi.org/project/rxiv-maker/${VERSION}/)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.docker.result }}" == "success" ]; then
            echo "- [Docker Hub](https://hub.docker.com/r/henriqueslab/rxiv-maker-base)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.homebrew-update.result }}" == "success" ]; then
            echo "- [Homebrew Tap](https://github.com/HenriquesLab/homebrew-rxiv-maker)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.apt-repository.result }}" == "success" ]; then
            echo "- [APT Repository](https://henriqueslab.github.io/rxiv-maker/)" >> $GITHUB_STEP_SUMMARY
          fi
