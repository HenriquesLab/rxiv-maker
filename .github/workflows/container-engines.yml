name: Container Engines Test

on:
  # Manual trigger for container engine testing
  workflow_dispatch:
    inputs:
      test_podman:
        description: 'Test Podman engine'
        required: false
        default: true
        type: boolean
      test_docker:
        description: 'Test Docker engine'
        required: false
        default: true
        type: boolean

  # Also run on changes to container engine code
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/rxiv_maker/engines/**'
      - 'src/rxiv_maker/docker/**'
      - 'tests/integration/**'
      - '.github/workflows/container-engines.yml'

# Minimal permissions
permissions:
  contents: read

# Cancel previous runs on same PR
concurrency:
  group: container-engines-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  UV_SYSTEM_PYTHON: 1
  PYTHONIOENCODING: utf-8

jobs:
  container-test:
    name: Container Engine Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        engine: [docker, podman]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Setup Docker
        if: matrix.engine == 'docker' && (github.event_name == 'workflow_dispatch' && inputs.test_docker || github.event_name == 'pull_request')
        run: |
          echo "üê≥ Docker is pre-installed on GitHub Actions runners"
          docker --version

      - name: Setup Podman
        if: matrix.engine == 'podman' && (github.event_name == 'workflow_dispatch' && inputs.test_podman || github.event_name == 'pull_request')
        run: |
          echo "üê≥ Installing Podman..."
          sudo apt-get update -qq
          sudo apt-get install -y podman

          # Configure podman for rootless operation
          podman --version

          # Test podman works
          podman run --rm hello-world || echo "Podman basic test completed"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: container-${{ runner.os }}-${{ matrix.engine }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            container-${{ runner.os }}-${{ matrix.engine }}-
            container-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install nox

      - name: Cache nox environments
        uses: actions/cache@v4
        with:
          path: .nox
          key: nox-container-${{ runner.os }}-${{ matrix.engine }}-${{ hashFiles('noxfile.py', 'pyproject.toml') }}
          restore-keys: |
            nox-container-${{ runner.os }}-${{ matrix.engine }}-
            nox-container-${{ runner.os }}-

      - name: Prepare container image
        id: prepare
        run: |
          echo "üîç Determining Docker image strategy..."

          # Determine branch and build strategy
          CURRENT_BRANCH="${{ github.ref_name }}"
          BUILD_LOCALLY=false
          IMAGE_TAG="latest"

          # Always build locally on dev branch for self-sufficiency
          if [ "$CURRENT_BRANCH" == "dev" ]; then
            echo "üîß Dev branch detected - building locally for self-sufficiency"
            BUILD_LOCALLY=true
            IMAGE_TAG="dev-latest"
            # Force clean build on dev to ensure latest dependencies
            echo "üßπ Forcing clean build on dev branch to ensure latest dependencies"
          else
            # Enhanced change detection for other branches
            DOCKER_FILES_CHANGED=false

            # Define patterns for Docker-related files
            DOCKER_FILE_PATTERNS=(
              "^src/docker/images/base/Dockerfile$"
              "^pyproject.toml$"
              "^src/docker/images/base/build\.sh$"
              "^src/docker/images/base/Makefile$"
              "^uv\.lock$"
            )

            detect_docker_changes() {
              local diff_cmd="$1"
              local description="$2"

              echo "üîç $description"

              # Execute git diff and capture output
              if changed_files=$(eval "$diff_cmd" 2>/dev/null); then
                if [ -n "$changed_files" ]; then
                  echo "üìù Changed files:"
                  echo "$changed_files" | while IFS= read -r file; do
                    echo "   - $file"
                  done

                  # Check each pattern
                  for pattern in "${DOCKER_FILE_PATTERNS[@]}"; do
                    if echo "$changed_files" | grep -qE "$pattern"; then
                      echo "‚úÖ Found Docker-related changes matching: $pattern"
                      return 0
                    fi
                  done
                  echo "üì¶ No Docker-related changes detected"
                  return 1
                else
                  echo "üìù No changes detected"
                  return 1
                fi
              else
                echo "‚ö†Ô∏è Git diff command failed: $diff_cmd"
                return 2
              fi
            }

            # Try different diff strategies with proper error handling
            if [ "${{ github.event_name }}" == "pull_request" ] && [ -n "${{ github.base_ref }}" ]; then
              if detect_docker_changes "git diff --name-only origin/${{ github.base_ref }}...HEAD" "Checking PR changes against ${{ github.base_ref }}"; then
                echo "üîß Docker-related files changed in PR - will build locally"
                BUILD_LOCALLY=true
                IMAGE_TAG="pr-test"
              fi
            else
              # Try multiple fallback strategies for push events
              strategies=(
                "git diff --name-only HEAD~1 HEAD:Checking changes against previous commit"
                "git diff --name-only HEAD~2 HEAD:Checking changes against 2 commits ago"
                "git show --name-only --format= HEAD:Checking files in current commit"
              )

              for strategy in "${strategies[@]}"; do
                cmd="${strategy%:*}"
                desc="${strategy#*:}"

                case $(detect_docker_changes "$cmd" "$desc") in
                  0)  # Changes found
                    echo "üîß Docker-related files changed - will build locally"
                    BUILD_LOCALLY=true
                    IMAGE_TAG="dev-latest"
                    break
                    ;;
                  1)  # No changes
                    continue
                    ;;
                  2)  # Git command failed
                    echo "‚ö†Ô∏è Git strategy failed, trying next..."
                    continue
                    ;;
                esac
              done

              # Ultimate fallback: if we can't determine changes reliably, be safe and build
              if [ "$BUILD_LOCALLY" != "true" ] && [ "${{ github.event_name }}" == "push" ]; then
                echo "üõ°Ô∏è Could not reliably detect changes - defaulting to local build for safety"
                BUILD_LOCALLY=true
                IMAGE_TAG="dev-latest"
              fi
            fi
          fi

          if [ "$BUILD_LOCALLY" == "true" ]; then
            echo "üèóÔ∏è Building local Docker image (tag: $IMAGE_TAG)..."

            # Universal local build function that works with both Docker and Podman
            build_image() {
              local engine=$1
              local tag=$2

              if [ "$engine" == "docker" ]; then
                # Set up buildx if not already available
                if ! docker buildx version >/dev/null 2>&1; then
                  echo "Setting up Docker buildx..."
                  docker buildx create --use
                fi

                # Force clean build on dev branch to ensure latest dependencies
                if [ "$tag" == "dev-latest" ]; then
                  echo "üßπ Forcing clean build with --no-cache for dev branch"
                  docker buildx build \
                    --load \
                    --platform linux/amd64 \
                    --no-cache \
                    --tag henriqueslab/rxiv-maker-base:$tag \
                    --file src/docker/images/base/Dockerfile \
                    .
                else
                  docker buildx build \
                    --load \
                    --platform linux/amd64 \
                    --tag henriqueslab/rxiv-maker-base:$tag \
                    --file src/docker/images/base/Dockerfile \
                    .
                fi
              else
                # Podman build (simpler, no buildx needed)
                echo "Building with Podman..."
                if [ "$tag" == "dev-latest" ]; then
                  echo "üßπ Forcing clean build with --no-cache for dev branch"
                  podman build \
                    --no-cache \
                    --tag henriqueslab/rxiv-maker-base:$tag \
                    --file src/docker/images/base/Dockerfile \
                    .
                else
                  podman build \
                    --tag henriqueslab/rxiv-maker-base:$tag \
                    --file src/docker/images/base/Dockerfile \
                    .
                fi
              fi
            }

            # Build with the current engine
            if build_image "${{ matrix.engine }}" "$IMAGE_TAG"; then
              # Tag as latest for compatibility with existing tests
              ${{ matrix.engine }} tag henriqueslab/rxiv-maker-base:$IMAGE_TAG henriqueslab/rxiv-maker-base:latest
              echo "‚úÖ Local Docker image built and tagged successfully"
            else
              echo "‚ùå Failed to build local Docker image"
              exit 1
            fi
          else
            echo "üê≥ Attempting to pull rxiv-maker base image with ${{ matrix.engine }}..."
            if ! ${{ matrix.engine }} pull henriqueslab/rxiv-maker-base:latest; then
              echo "‚ùå Failed to pull henriqueslab/rxiv-maker-base:latest"
              echo "This might be because:"
              echo "1. The image doesn't exist yet (first build)"
              echo "2. Network connectivity issues"
              echo "3. Docker Hub rate limiting"
              echo "4. Authentication issues"
              echo ""
              echo "üèóÔ∏è Falling back to local build..."

              # Enhanced emergency fallback that works with both engines
              if [ "${{ matrix.engine }}" == "docker" ]; then
                if ! docker buildx version >/dev/null 2>&1; then
                  echo "Setting up Docker buildx..."
                  docker buildx create --use
                fi

                docker buildx build \
                  --load \
                  --platform linux/amd64 \
                  --tag henriqueslab/rxiv-maker-base:latest \
                  --file src/docker/images/base/Dockerfile \
                  .
              else
                echo "Building with Podman as fallback..."
                podman build \
                  --tag henriqueslab/rxiv-maker-base:latest \
                  --file src/docker/images/base/Dockerfile \
                  .
              fi

              if [ $? -eq 0 ]; then
                echo "‚úÖ Emergency local build successful"
              else
                echo "‚ùå Emergency local build failed"
                exit 1
              fi
            else
              echo "‚úÖ Successfully pulled henriqueslab/rxiv-maker-base:latest"
            fi
          fi

          # Final validation that we have an image
          echo "üîç Verifying Docker image availability..."
          if ! ${{ matrix.engine }} image inspect henriqueslab/rxiv-maker-base:latest >/dev/null 2>&1; then
            echo "‚ùå henriqueslab/rxiv-maker-base:latest not available"
            echo "Available images:"
            ${{ matrix.engine }} images
            echo "image_ready=false" >> $GITHUB_OUTPUT
            echo "::warning::Docker image preparation failed - tests will be skipped"
          else
            echo "‚úÖ henriqueslab/rxiv-maker-base:latest is available"
            echo "image_ready=true" >> $GITHUB_OUTPUT
          fi

      - name: Show image preparation status
        run: |
          if [ "${{ steps.prepare.outputs.image_ready }}" == "true" ]; then
            echo "‚úÖ Docker image is ready - proceeding with tests"
          else
            echo "‚ö†Ô∏è Docker image is not ready - skipping container tests"
            echo "This may be due to:"
            echo "  - Image pull/build failure"
            echo "  - Network connectivity issues"
            echo "  - Missing dependencies in container"
            echo ""
            echo "The workflow will continue but container tests will be skipped."
          fi

      - name: Test container engine availability
        if: ${{ steps.prepare.outputs.image_ready == 'true' }}
        run: |
          echo "üîç Testing ${{ matrix.engine }} engine availability..."
          uv run python -c "
          import sys; sys.path.insert(0, 'src')
          from rxiv_maker.engines.factory import get_container_engine
          engine = get_container_engine('${{ matrix.engine }}')
          print(f'‚úÖ {engine.engine_name} engine created successfully')
          print(f'Available: {engine.check_available()}')
          "

      - name: Validate container dependencies
        if: ${{ steps.prepare.outputs.image_ready == 'true' }}
        run: |
          echo "üß™ Validating dependencies in ${{ matrix.engine }} container..."

          # Debug: Check what images are available
          echo "üìã Available images:"
          ${{ matrix.engine }} images | grep rxiv-maker || echo "No rxiv-maker images found"

          # Debug: Check image details
          echo "üîç Inspecting image details:"
          ${{ matrix.engine }} image inspect henriqueslab/rxiv-maker-base:latest --format '{{.Created}} {{.Id}}' || echo "Failed to inspect image"

          # Test 1: Base image dependencies (current approach)
          echo "Testing base image dependencies..."
          ${{ matrix.engine }} run --rm henriqueslab/rxiv-maker-base:latest python3 -c "
          import sys
          print(f'Python version: {sys.version}')
          print(f'Python executable: {sys.executable}')
          print(f'Python path: {sys.path[:3]}')  # Show first 3 entries
          try:
              import platformdirs, click, rich, packaging, tomli_w
              print('‚úÖ Base dependencies available')
              print(f'platformdirs version: {platformdirs.__version__}')
              print(f'click version: {click.__version__}')
          except ImportError as e:
              print(f'‚ùå Base dependency error: {e}')
              print('Checking what packages are installed...')
              import subprocess
              result = subprocess.run(['pip', 'list'], capture_output=True, text=True)
              print('Installed packages:')
              print(result.stdout[:1000])  # First 1000 chars
              exit(1)
          "

          # Test 2: Runtime dependency injection (new approach)
          echo "Testing runtime dependency injection..."
          ${{ matrix.engine }} run --rm -v $PWD:/workspace henriqueslab/rxiv-maker-base:latest bash -c "
          install-project-deps.sh && python3 -c '
          import sys
          sys.path.insert(0, \"/workspace/src\")
          try:
              from rxiv_maker.utils.cache_utils import get_cache_dir
              from rxiv_maker.validators.doi_validator import DOIValidator
              from rxiv_maker.utils.platform import platform_detector
              print(\"‚úÖ Runtime dependency injection successful!\")
          except ImportError as e:
              print(f\"‚ùå Runtime injection error: {e}\")
              exit(1)
          '
          "

          echo "‚úÖ All dependency validation tests passed!"

      - name: Run container engine tests
        if: ${{ steps.prepare.outputs.image_ready == 'true' }}
        run: |
          echo "üß™ Running ${{ matrix.engine }} engine tests..."
          nox -s test_${{ matrix.engine }}

      - name: Test PDF generation with container engine
        if: ${{ steps.prepare.outputs.image_ready == 'true' }}
        run: |
          echo "üìÑ Testing PDF generation with ${{ matrix.engine }} engine..."
          # Use environment variable to set engine
          export RXIV_ENGINE=${{ matrix.engine }}
          nox -s pdf -- ${{ matrix.engine }}

      - name: Verify outputs
        if: ${{ steps.prepare.outputs.image_ready == 'true' }}
        run: |
          echo "‚úÖ Verifying generated outputs..."
          ls -la output/ || echo "No output directory found"
          find . -name "*.pdf" -ls || echo "No PDF files found"

      - name: Container cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up containers..."
          # Clean up any running containers
          ${{ matrix.engine }} ps -q | xargs -r ${{ matrix.engine }} stop || true
          ${{ matrix.engine }} system prune -f || true

      - name: Summary
        if: always()
        run: |
          echo "## ${{ matrix.engine }} Engine Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ **${{ matrix.engine }} engine tests passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **${{ matrix.engine }} engine tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Debug commands:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "nox -s test_${{ matrix.engine }}  # Run ${{ matrix.engine }} tests" >> $GITHUB_STEP_SUMMARY
            echo "RXIV_ENGINE=${{ matrix.engine }} nox -s pdf  # Test PDF generation" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
