name: 📊 Cross-Repository Health Monitor

on:
  schedule:
    # Run once daily during business hours UTC (9 AM, weekdays)
    - cron: '0 9 * * 1-5'

  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to perform'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'workflows'
          - 'repositories'
          - 'releases'
          - 'security'

      alert_threshold:
        description: 'Alert threshold for failed workflows (hours)'
        required: false
        default: '24'
        type: string

permissions:
  contents: read
  actions: read

env:
  MAIN_REPO: ${{ github.repository }}
  DOCKER_REPO: HenriquesLab/docker-rxiv-maker
  VSCODE_REPO: HenriquesLab/vscode-rxiv-maker
  ALERT_THRESHOLD_HOURS: ${{ github.event.inputs.alert_threshold || '24' }}

jobs:
  # Check health of cross-repository workflows
  workflow-health-check:
    name: 🔍 Workflow Health Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      main_status: ${{ steps.main.outputs.status }}
      docker_status: ${{ steps.docker.outputs.status }}
      vscode_status: ${{ steps.vscode.outputs.status }}
      overall_health: ${{ steps.assessment.outputs.health }}
      alerts_required: ${{ steps.assessment.outputs.alerts_required }}

    steps:
      - name: 📋 Check main repository workflows
        id: main
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking main repository workflow health..."

          # Get recent workflow runs
          FAILED_RUNS=$(gh run list --repo "$MAIN_REPO" \
            --status failure \
            --created "$(date -d '24 hours ago' -I)" \
            --limit 20 \
            --json workflowName,status,createdAt,conclusion)

          FAILED_COUNT=$(echo "$FAILED_RUNS" | jq length)
          CRITICAL_FAILURES=$(echo "$FAILED_RUNS" | jq '[.[] | select(.workflowName | test("release|docker"))] | length')

          echo "Recent failed runs: $FAILED_COUNT"
          echo "Critical workflow failures: $CRITICAL_FAILURES"

          # Assess health status
          if [ "$CRITICAL_FAILURES" -gt 0 ]; then
            HEALTH_STATUS="critical"
          elif [ "$FAILED_COUNT" -gt 3 ]; then
            HEALTH_STATUS="degraded"
          elif [ "$FAILED_COUNT" -gt 0 ]; then
            HEALTH_STATUS="warning"
          else
            HEALTH_STATUS="healthy"
          fi

          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "critical_failures=$CRITICAL_FAILURES" >> $GITHUB_OUTPUT

          echo "✅ Main repository status: $HEALTH_STATUS"

      - name: 🐳 Check Docker repository workflows
        id: docker
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking Docker repository workflow health..."

          # Check if we can access the repository
          if ! gh repo view "$DOCKER_REPO" >/dev/null 2>&1; then
            echo "❌ Cannot access Docker repository"
            echo "status=inaccessible" >> $GITHUB_OUTPUT
            echo "error=Repository not accessible" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get recent workflow runs
          FAILED_RUNS=$(gh run list --repo "$DOCKER_REPO" \
            --status failure \
            --created "$(date -d '24 hours ago' -I)" \
            --limit 10 \
            --json workflowName,status,createdAt,conclusion 2>/dev/null || echo "[]")

          FAILED_COUNT=$(echo "$FAILED_RUNS" | jq length)

          echo "Recent failed runs: $FAILED_COUNT"

          # Check for recent successful builds
          RECENT_BUILDS=$(gh run list --repo "$DOCKER_REPO" \
            --status success \
            --created "$(date -d '7 days ago' -I)" \
            --limit 5 2>/dev/null | wc -l || echo 0)

          # Assess health status
          if [ "$FAILED_COUNT" -gt 2 ]; then
            HEALTH_STATUS="degraded"
          elif [ "$FAILED_COUNT" -gt 0 ]; then
            HEALTH_STATUS="warning"
          elif [ "$RECENT_BUILDS" -gt 0 ]; then
            HEALTH_STATUS="healthy"
          else
            HEALTH_STATUS="stale"
          fi

          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "recent_builds=$RECENT_BUILDS" >> $GITHUB_OUTPUT

          echo "✅ Docker repository status: $HEALTH_STATUS"

      - name: 💻 Check VSCode extension repository workflows
        id: vscode
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking VSCode extension repository workflow health..."

          # Check if we can access the repository
          if ! gh repo view "$VSCODE_REPO" >/dev/null 2>&1; then
            echo "❌ Cannot access VSCode extension repository"
            echo "status=inaccessible" >> $GITHUB_OUTPUT
            echo "error=Repository not accessible" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get recent workflow runs
          FAILED_RUNS=$(gh run list --repo "$VSCODE_REPO" \
            --status failure \
            --created "$(date -d '24 hours ago' -I)" \
            --limit 10 \
            --json workflowName,status,createdAt,conclusion 2>/dev/null || echo "[]")

          FAILED_COUNT=$(echo "$FAILED_RUNS" | jq length)

          echo "Recent failed runs: $FAILED_COUNT"

          # Check for recent successful builds
          RECENT_BUILDS=$(gh run list --repo "$VSCODE_REPO" \
            --status success \
            --created "$(date -d '7 days ago' -I)" \
            --limit 5 2>/dev/null | wc -l || echo 0)

          # Assess health status
          if [ "$FAILED_COUNT" -gt 2 ]; then
            HEALTH_STATUS="degraded"
          elif [ "$FAILED_COUNT" -gt 0 ]; then
            HEALTH_STATUS="warning"
          elif [ "$RECENT_BUILDS" -gt 0 ]; then
            HEALTH_STATUS="healthy"
          else
            HEALTH_STATUS="stale"
          fi

          echo "status=$HEALTH_STATUS" >> $GITHUB_OUTPUT
          echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "recent_builds=$RECENT_BUILDS" >> $GITHUB_OUTPUT

          echo "✅ VSCode extension repository status: $HEALTH_STATUS"

      - name: 🎯 Overall health assessment
        id: assessment
        run: |
          echo "📊 Performing overall health assessment..."

          MAIN_STATUS="${{ steps.main.outputs.status }}"
          DOCKER_STATUS="${{ steps.docker.outputs.status }}"
          VSCODE_STATUS="${{ steps.vscode.outputs.status }}"

          echo "Main: $MAIN_STATUS"
          echo "Docker: $DOCKER_STATUS"
          echo "VSCode: $VSCODE_STATUS"

          # Determine overall health
          CRITICAL_COUNT=0
          DEGRADED_COUNT=0
          WARNING_COUNT=0

          for status in "$MAIN_STATUS" "$DOCKER_STATUS" "$VSCODE_STATUS"; do
            case "$status" in
              "critical"|"inaccessible")
                CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
                ;;
              "degraded")
                DEGRADED_COUNT=$((DEGRADED_COUNT + 1))
                ;;
              "warning"|"stale")
                WARNING_COUNT=$((WARNING_COUNT + 1))
                ;;
            esac
          done

          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            OVERALL_HEALTH="critical"
            ALERTS_REQUIRED="true"
          elif [ "$DEGRADED_COUNT" -gt 1 ]; then
            OVERALL_HEALTH="degraded"
            ALERTS_REQUIRED="true"
          elif [ "$DEGRADED_COUNT" -gt 0 ] || [ "$WARNING_COUNT" -gt 1 ]; then
            OVERALL_HEALTH="warning"
            ALERTS_REQUIRED="false"
          else
            OVERALL_HEALTH="healthy"
            ALERTS_REQUIRED="false"
          fi

          echo "health=$OVERALL_HEALTH" >> $GITHUB_OUTPUT
          echo "alerts_required=$ALERTS_REQUIRED" >> $GITHUB_OUTPUT

          echo "🎯 Overall ecosystem health: $OVERALL_HEALTH"
          echo "🚨 Alerts required: $ALERTS_REQUIRED"

  # Check repository synchronization
  repository-sync-check:
    name: 🔄 Repository Synchronization Check
    runs-on: ubuntu-latest
    needs: workflow-health-check
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'repositories'
    timeout-minutes: 10
    outputs:
      sync_status: ${{ steps.sync.outputs.status }}
      version_alignment: ${{ steps.sync.outputs.version_alignment }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v5

      - name: 🔄 Check cross-repository synchronization
        id: sync
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking repository synchronization..."

          # Get current version from main repository
          MAIN_VERSION=$(python -c "exec(open('src/rxiv_maker/__version__.py').read()); print(__version__)")
          echo "Main repository version: $MAIN_VERSION"

          # Check Docker repository version (from recent releases)
          DOCKER_VERSION="unknown"
          if DOCKER_RELEASES=$(gh release list --repo "$DOCKER_REPO" --limit 5 2>/dev/null); then
            DOCKER_VERSION=$(echo "$DOCKER_RELEASES" | head -1 | awk '{print $3}' | sed 's/v//' || echo "unknown")
            echo "Docker repository version: $DOCKER_VERSION"
          else
            echo "⚠️ Cannot access Docker repository releases"
          fi

          # Check VSCode extension repository version (from recent releases)
          VSCODE_VERSION="unknown"
          if VSCODE_RELEASES=$(gh release list --repo "$VSCODE_REPO" --limit 5 2>/dev/null); then
            VSCODE_VERSION=$(echo "$VSCODE_RELEASES" | head -1 | awk '{print $3}' | sed 's/v//' || echo "unknown")
            echo "VSCode extension version: $VSCODE_VERSION"
          else
            echo "⚠️ Cannot access VSCode extension repository releases"
          fi

          # Assess version alignment
          ALIGNED_COUNT=0
          TOTAL_COUNT=3

          if [ "$DOCKER_VERSION" == "$MAIN_VERSION" ]; then
            ALIGNED_COUNT=$((ALIGNED_COUNT + 1))
            echo "✅ Docker version aligned"
          else
            echo "⚠️ Docker version misaligned: $DOCKER_VERSION vs $MAIN_VERSION"
          fi

          if [ "$VSCODE_VERSION" == "$MAIN_VERSION" ]; then
            ALIGNED_COUNT=$((ALIGNED_COUNT + 1))
            echo "✅ VSCode extension version aligned"
          else
            echo "⚠️ VSCode extension version misaligned: $VSCODE_VERSION vs $MAIN_VERSION"
          fi

          # Determine sync status
          ALIGNMENT_RATIO=$((ALIGNED_COUNT * 100 / TOTAL_COUNT))

          if [ "$ALIGNMENT_RATIO" -ge 100 ]; then
            SYNC_STATUS="fully_aligned"
          elif [ "$ALIGNMENT_RATIO" -ge 66 ]; then
            SYNC_STATUS="mostly_aligned"
          elif [ "$ALIGNMENT_RATIO" -ge 33 ]; then
            SYNC_STATUS="partially_aligned"
          else
            SYNC_STATUS="misaligned"
          fi

          echo "status=$SYNC_STATUS" >> $GITHUB_OUTPUT
          echo "version_alignment=$ALIGNMENT_RATIO" >> $GITHUB_OUTPUT
          echo "main_version=$MAIN_VERSION" >> $GITHUB_OUTPUT
          echo "docker_version=$DOCKER_VERSION" >> $GITHUB_OUTPUT
          echo "vscode_version=$VSCODE_VERSION" >> $GITHUB_OUTPUT

          echo "🔄 Repository synchronization: $SYNC_STATUS ($ALIGNMENT_RATIO% aligned)"

  # Security audit check
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event.inputs.check_type == 'security'
    timeout-minutes: 5
    outputs:
      security_score: ${{ steps.audit.outputs.security_score }}
      security_level: ${{ steps.audit.outputs.security_level }}
      issues_count: ${{ steps.audit.outputs.issues_count }}
      warnings_count: ${{ steps.audit.outputs.warnings_count }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: 🔒 Run security validation
        id: audit
        run: |
          echo "🔍 Running security audit on GitHub Actions workflows..."

          # Make script executable and run it
          chmod +x .github/scripts/validate-secrets-security.sh

          # Run security validation with GitHub Actions output format
          OUTPUT_FORMAT=github-actions .github/scripts/validate-secrets-security.sh >> $GITHUB_OUTPUT || true

          # Also generate summary format for logging
          echo "Security audit results:"
          OUTPUT_FORMAT=summary .github/scripts/validate-secrets-security.sh || true

      - name: 📊 Security audit summary
        run: |
          echo "### 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          SCORE="${{ steps.audit.outputs.security_score }}"
          LEVEL="${{ steps.audit.outputs.security_level }}"
          ISSUES="${{ steps.audit.outputs.issues_count }}"
          WARNINGS="${{ steps.audit.outputs.warnings_count }}"

          case "$LEVEL" in
            "excellent")
              LEVEL_ICON="🟢"
              LEVEL_COLOR="green"
              ;;
            "good")
              LEVEL_ICON="🟢"
              LEVEL_COLOR="green"
              ;;
            "fair")
              LEVEL_ICON="🟡"
              LEVEL_COLOR="yellow"
              ;;
            "poor")
              LEVEL_ICON="🟠"
              LEVEL_COLOR="orange"
              ;;
            "critical")
              LEVEL_ICON="🔴"
              LEVEL_COLOR="red"
              ;;
            *)
              LEVEL_ICON="⚪"
              LEVEL_COLOR="gray"
              ;;
          esac

          echo "**Security Score:** $SCORE/100" >> $GITHUB_STEP_SUMMARY
          echo "**Security Level:** $LEVEL_ICON $LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Critical Issues | $ISSUES |" >> $GITHUB_STEP_SUMMARY
          echo "| Warnings | $WARNINGS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$ISSUES" -gt 0 ]; then
            echo "🚨 **Critical security issues detected!** Review workflow configurations." >> $GITHUB_STEP_SUMMARY
          elif [ "$WARNINGS" -gt 0 ]; then
            echo "⚠️ Security warnings detected. Consider implementing recommended improvements." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security issues detected. Security posture is good." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Full Security Audit:** [View Report](.github/SECURITY-AUDIT.md)" >> $GITHUB_STEP_SUMMARY

  # Generate health report
  health-report:
    name: 📋 Generate Health Report
    runs-on: ubuntu-latest
    needs: [workflow-health-check, repository-sync-check, security-audit]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📋 Generate comprehensive health report
        run: |
          echo "# 📊 Rxiv-Maker Ecosystem Health Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall health status
          OVERALL_HEALTH="${{ needs.workflow-health-check.outputs.overall_health }}"
          case "$OVERALL_HEALTH" in
            "healthy")
              echo "## 🟢 Overall Status: HEALTHY" >> $GITHUB_STEP_SUMMARY
              ;;
            "warning")
              echo "## 🟡 Overall Status: WARNING" >> $GITHUB_STEP_SUMMARY
              ;;
            "degraded")
              echo "## 🟠 Overall Status: DEGRADED" >> $GITHUB_STEP_SUMMARY
              ;;
            "critical")
              echo "## 🔴 Overall Status: CRITICAL" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "## ⚪ Overall Status: UNKNOWN" >> $GITHUB_STEP_SUMMARY
              ;;
          esac

          echo "" >> $GITHUB_STEP_SUMMARY

          # Repository health breakdown
          echo "## 🏗️ Repository Health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Repository | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Main repository
          MAIN_STATUS="${{ needs.workflow-health-check.outputs.main_status }}"
          case "$MAIN_STATUS" in
            "healthy") MAIN_ICON="🟢" ;;
            "warning") MAIN_ICON="🟡" ;;
            "degraded") MAIN_ICON="🟠" ;;
            "critical") MAIN_ICON="🔴" ;;
            *) MAIN_ICON="⚪" ;;
          esac
          echo "| [rxiv-maker](${{ github.server_url }}/${{ env.MAIN_REPO }}) | $MAIN_ICON $MAIN_STATUS | Failed workflows in 24h: ${{ needs.workflow-health-check.outputs.main_status == 'healthy' && '0' || 'Multiple' }} |" >> $GITHUB_STEP_SUMMARY

          # Docker repository
          DOCKER_STATUS="${{ needs.workflow-health-check.outputs.docker_status }}"
          case "$DOCKER_STATUS" in
            "healthy") DOCKER_ICON="🟢" ;;
            "warning") DOCKER_ICON="🟡" ;;
            "degraded") DOCKER_ICON="🟠" ;;
            "critical"|"inaccessible") DOCKER_ICON="🔴" ;;
            "stale") DOCKER_ICON="🟤" ;;
            *) DOCKER_ICON="⚪" ;;
          esac
          echo "| [docker-rxiv-maker](https://github.com/${{ env.DOCKER_REPO }}) | $DOCKER_ICON $DOCKER_STATUS | Container image build status |" >> $GITHUB_STEP_SUMMARY

          # VSCode extension repository
          VSCODE_STATUS="${{ needs.workflow-health-check.outputs.vscode_status }}"
          case "$VSCODE_STATUS" in
            "healthy") VSCODE_ICON="🟢" ;;
            "warning") VSCODE_ICON="🟡" ;;
            "degraded") VSCODE_ICON="🟠" ;;
            "critical"|"inaccessible") VSCODE_ICON="🔴" ;;
            "stale") VSCODE_ICON="🟤" ;;
            *) VSCODE_ICON="⚪" ;;
          esac
          echo "| [vscode-rxiv-maker](https://github.com/${{ env.VSCODE_REPO }}) | $VSCODE_ICON $VSCODE_STATUS | VS Code extension workflows |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY

          # Security audit results
          if [ "${{ needs.security-audit.result }}" == "success" ]; then
            SECURITY_SCORE="${{ needs.security-audit.outputs.security_score }}"
            SECURITY_LEVEL="${{ needs.security-audit.outputs.security_level }}"
            SECURITY_ISSUES="${{ needs.security-audit.outputs.issues_count }}"
            SECURITY_WARNINGS="${{ needs.security-audit.outputs.warnings_count }}"

            echo "## 🔒 Security Audit" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Security Score:** $SECURITY_SCORE/100" >> $GITHUB_STEP_SUMMARY
            echo "**Security Level:** $SECURITY_LEVEL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical Issues | $SECURITY_ISSUES |" >> $GITHUB_STEP_SUMMARY
            echo "| Warnings | $SECURITY_WARNINGS |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$SECURITY_ISSUES" -gt 0 ]; then
              echo "🚨 **Action Required:** Critical security issues detected" >> $GITHUB_STEP_SUMMARY
            elif [ "$SECURITY_WARNINGS" -gt 0 ]; then
              echo "⚠️ **Recommendation:** Review security warnings" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **Status:** Security posture is good" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Repository synchronization
          if [ "${{ needs.repository-sync-check.result }}" == "success" ]; then
            SYNC_STATUS="${{ needs.repository-sync-check.outputs.sync_status }}"
            VERSION_ALIGNMENT="${{ needs.repository-sync-check.outputs.version_alignment }}"

            echo "## 🔄 Repository Synchronization" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Synchronization Status:** $SYNC_STATUS" >> $GITHUB_STEP_SUMMARY
            echo "**Version Alignment:** $VERSION_ALIGNMENT%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$VERSION_ALIGNMENT" -lt 100 ]; then
              echo "### ⚠️ Version Misalignments Detected" >> $GITHUB_STEP_SUMMARY
              echo "Some package repositories may not be synchronized with the latest release." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Alerts and recommendations
          if [ "${{ needs.workflow-health-check.outputs.alerts_required }}" == "true" ]; then
            echo "## 🚨 Immediate Action Required" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Critical issues detected that require immediate attention:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$MAIN_STATUS" == "critical" ]; then
              echo "- 🔥 **Main repository workflows are failing** - Check [workflow runs](${{ github.server_url }}/${{ env.MAIN_REPO }}/actions)" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$DOCKER_STATUS" == "critical" ] || [ "$DOCKER_STATUS" == "inaccessible" ]; then
              echo "- 🐳 **Docker repository issues detected** - Verify [docker-rxiv-maker](https://github.com/${{ env.DOCKER_REPO }})" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$VSCODE_STATUS" == "critical" ] || [ "$VSCODE_STATUS" == "inaccessible" ]; then
              echo "- 💻 **VSCode extension repository issues detected** - Verify [vscode-rxiv-maker](https://github.com/${{ env.VSCODE_REPO }})" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Next scheduled check
          echo "## 📅 Monitoring Schedule" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Automated Checks:** Once daily (9 AM UTC, weekdays)" >> $GITHUB_STEP_SUMMARY
          echo "- **Manual Trigger:** Use [workflow dispatch](${{ github.server_url }}/${{ env.MAIN_REPO }}/actions/workflows/cross-repository-health-monitor.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration:** Health status affects release workflow decisions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This report is automatically generated by the Cross-Repository Health Monitor*" >> $GITHUB_STEP_SUMMARY

      - name: 🚨 Create alert issue on critical failures
        if: needs.workflow-health-check.outputs.alerts_required == 'true'
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🚨 Creating alert issue for critical failures..."

          ISSUE_TITLE="🚨 Cross-Repository Health Alert - $(date -u '+%Y-%m-%d %H:%M UTC')"
          ISSUE_BODY="## 🚨 Automated Health Alert

          Critical issues have been detected in the rxiv-maker ecosystem that require immediate attention.

          ### 🔍 Issue Summary

          - **Overall Health:** ${{ needs.workflow-health-check.outputs.overall_health }}
          - **Main Repository:** ${{ needs.workflow-health-check.outputs.main_status }}
          - **Docker Repository:** ${{ needs.workflow-health-check.outputs.docker_status }}
          - **VSCode Extension:** ${{ needs.workflow-health-check.outputs.vscode_status }}

          ### 🎯 Recommended Actions

          1. Review failed workflow runs in the affected repositories
          2. Check repository access and permissions
          3. Verify cross-repository coordination is working
          4. Run manual health check: [\`workflow dispatch\`](${{ github.server_url }}/${{ env.MAIN_REPO }}/actions/workflows/cross-repository-health-monitor.yml)

          ### 📊 Full Report

          View the complete health report in the [workflow run](${{ github.server_url }}/${{ env.MAIN_REPO }}/actions/runs/${{ github.run_id }}).

          ---
          *This issue was automatically created by the Cross-Repository Health Monitor*
          *Created at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*"

          # Check if a recent alert issue already exists
          EXISTING_ISSUES=$(gh issue list --repo "${{ env.MAIN_REPO }}" \
            --label "health-alert" \
            --state open \
            --created "$(date -d '24 hours ago' -I)" \
            --limit 1 \
            --json number 2>/dev/null || echo "[]")

          if [ "$(echo "$EXISTING_ISSUES" | jq length)" -eq 0 ]; then
            echo "Creating new alert issue..."
            gh issue create \
              --repo "${{ env.MAIN_REPO }}" \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "health-alert,bug,help wanted"
            echo "✅ Alert issue created successfully"
          else
            echo "ℹ️ Recent alert issue already exists, skipping creation"
          fi
