name: Auto-update Homebrew Formula

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      use_direct_push:
        description: 'Use direct push instead of PR workflow'
        type: boolean
        default: true
      tag_name:
        description: 'Tag name for manual runs (e.g., v1.5.0)'
        type: string
        required: false

permissions:
  contents: read

env:
  HOMEBREW_TAP_REPO: HenriquesLab/homebrew-rxiv-maker
  FORMULA_FILE: Formula/rxiv-maker.rb
  # Feature flag: set to 'true' to enable direct push mode
  USE_DIRECT_PUSH: ${{ github.event.inputs.use_direct_push || vars.HOMEBREW_DIRECT_PUSH || 'true' }}

jobs:
  update-homebrew-formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Homebrew (for direct push mode)
        if: env.USE_DIRECT_PUSH == 'true'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Choose workflow mode
        run: |
          if [ "${{ env.USE_DIRECT_PUSH }}" == "true" ]; then
            echo "üöÄ Using DIRECT PUSH mode - streamlined workflow"
            echo "mode=direct" >> $GITHUB_ENV
          else
            echo "üìã Using PR mode - traditional workflow"
            echo "mode=pr" >> $GITHUB_ENV
          fi

      - name: Get release information
        id: release
        run: |
          # Handle manual workflow dispatch with custom tag
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
            echo "Using manual tag: $TAG_NAME"
          else
            TAG_NAME="${GITHUB_REF_NAME}"
            echo "Using release tag: $TAG_NAME"
          fi

          # Extract version from tag (remove 'v' prefix if present)
          VERSION="${TAG_NAME#v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Get release tarball URL
          TARBALL_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${TAG_NAME}.tar.gz"
          echo "tarball_url=$TARBALL_URL" >> $GITHUB_OUTPUT

          echo "üì¶ Release version: $VERSION"
          echo "üîó Tarball URL: $TARBALL_URL"

      - name: Validate version synchronization
        run: |
          echo "üîç Validating version synchronization between release and codebase..."

          # Get version from release tag
          RELEASE_VERSION="${{ steps.release.outputs.version }}"
          echo "üì¶ Release version: $RELEASE_VERSION"

          # Get version from codebase
          CODEBASE_VERSION=$(python -c "
          import sys
          import os
          sys.path.insert(0, 'src')
          try:
              from rxiv_maker import __version__
              print(__version__)
          except ImportError as e:
              print(f'Error importing version: {e}', file=sys.stderr)
              sys.exit(1)
          ")

          echo "üìù Codebase version: $CODEBASE_VERSION"

          # Validate versions match
          if [ "$RELEASE_VERSION" != "$CODEBASE_VERSION" ]; then
            echo "‚ùå Version mismatch detected!"
            echo "   Release tag version: $RELEASE_VERSION"
            echo "   Codebase version: $CODEBASE_VERSION"
            echo ""
            echo "üí° Possible solutions:"
            echo "   1. Update the codebase version to match the release tag"
            echo "   2. Create a new release with the correct version"
            echo "   3. Use manual workflow dispatch with the correct tag"
            exit 1
          fi

          echo "‚úÖ Version synchronization validated: $RELEASE_VERSION"

      - name: Download and calculate SHA256 (PR mode)
        if: env.mode == 'pr'
        id: sha256_pr
        run: |
          # Download the release tarball
          echo "‚¨áÔ∏è Downloading release tarball..."
          curl -L -o rxiv-maker-${{ steps.release.outputs.version }}.tar.gz \
            "${{ steps.release.outputs.tarball_url }}"

          # Calculate SHA256 hash
          SHA256=$(sha256sum rxiv-maker-${{ steps.release.outputs.version }}.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

          echo "üîí SHA256: $SHA256"

          # Verify download
          ls -la rxiv-maker-${{ steps.release.outputs.version }}.tar.gz

      - name: Download and verify tarball (Direct push mode)
        if: env.mode == 'direct'
        id: sha256_direct
        run: |
          echo "‚¨áÔ∏è Downloading and verifying release tarball..."
          curl -L -f -o rxiv-maker-${{ steps.release.outputs.version }}.tar.gz \
            "${{ steps.release.outputs.tarball_url }}"

          if [ ! -f "rxiv-maker-${{ steps.release.outputs.version }}.tar.gz" ]; then
            echo "‚ùå Failed to download tarball"
            exit 1
          fi

          SHA256=$(sha256sum rxiv-maker-${{ steps.release.outputs.version }}.tar.gz | cut -d' ' -f1)
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          echo "üîí SHA256: $SHA256"

          # Verify tarball integrity
          tar -tzf rxiv-maker-${{ steps.release.outputs.version }}.tar.gz > /dev/null
          echo "‚úÖ Tarball integrity verified"

      # Set unified sha256 output for subsequent steps
      - name: Set SHA256 output
        id: sha256
        run: |
          if [ "${{ env.mode }}" == "direct" ]; then
            echo "sha256=${{ steps.sha256_direct.outputs.sha256 }}" >> $GITHUB_OUTPUT
          else
            echo "sha256=${{ steps.sha256_pr.outputs.sha256 }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Homebrew tap repository
        uses: actions/checkout@v5
        with:
          repository: ${{ env.HOMEBREW_TAP_REPO }}
          path: homebrew-tap
          token: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}

      # ===============================
      # DIRECT PUSH MODE (STREAMLINED)
      # ===============================

      - name: Create backup and update formula (Direct push)
        if: env.mode == 'direct'
        working-directory: homebrew-tap
        run: |
          # Store current commit for rollback
          BACKUP_COMMIT=$(git rev-parse HEAD)
          echo "backup_commit=$BACKUP_COMMIT" >> $GITHUB_ENV
          echo "üîÑ Backup commit: $BACKUP_COMMIT"

          # Create backup of current formula
          cp ${{ env.FORMULA_FILE }} formula.backup

          # Update formula
          echo "üìù Updating formula..."
          sed -i 's|url ".*"|url "${{ steps.release.outputs.tarball_url }}"|g' ${{ env.FORMULA_FILE }}
          sed -i 's|sha256 ".*"|sha256 "${{ steps.sha256.outputs.sha256 }}"|g' ${{ env.FORMULA_FILE }}

          echo "üìã Formula changes:"
          git diff ${{ env.FORMULA_FILE }}

      - name: Validate formula syntax (Direct push)
        if: env.mode == 'direct'
        working-directory: homebrew-tap
        run: |
          echo "üîç Validating formula syntax..."

          # Check Ruby syntax
          ruby -c ${{ env.FORMULA_FILE }}
          echo "‚úÖ Ruby syntax valid"

          # Install our tap temporarily for validation
          brew tap HenriquesLab/rxiv-maker .

          # Run brew audit using formula name
          brew audit --strict --online rxiv-maker
          echo "‚úÖ Brew audit passed"


      - name: Commit and push directly to main (Direct push)
        if: env.mode == 'direct'
        working-directory: homebrew-tap
        run: |
          # Configure git
          git config user.name "rxiv-maker-bot"
          git config user.email "noreply@henriqueslab.org"

          # Check if there are changes to commit
          if git diff --quiet ${{ env.FORMULA_FILE }}; then
            echo "üìù No changes detected, formula already up to date"
            exit 0
          fi

          # Commit changes
          git add ${{ env.FORMULA_FILE }}
          git commit -m "chore: update rxiv-maker to v${{ steps.release.outputs.version }}

          Auto-generated direct update from rxiv-maker release v${{ steps.release.outputs.version }}

          - Updated URL: ${{ steps.release.outputs.tarball_url }}
          - Updated SHA256: ${{ steps.sha256.outputs.sha256 }}
          - Formula validated and tested successfully

          ü§ñ Generated by streamlined GitHub Actions workflow"

          # Push directly to main
          echo "üì§ Pushing directly to main..."
          git push origin main
          echo "‚úÖ Successfully pushed to main"

      - name: Post-push verification (Direct push)
        if: env.mode == 'direct'
        working-directory: homebrew-tap
        run: |
          echo "üîç Verifying push was successful..."

          # Wait for GitHub to process the push
          sleep 10

          # Fetch latest changes to verify
          git fetch origin main
          LATEST_COMMIT=$(git rev-parse origin/main)
          LOCAL_COMMIT=$(git rev-parse HEAD)

          if [ "$LATEST_COMMIT" != "$LOCAL_COMMIT" ]; then
            echo "‚ùå Push verification failed: commits don't match"
            echo "Local: $LOCAL_COMMIT"
            echo "Remote: $LATEST_COMMIT"
            exit 1
          fi

          echo "‚úÖ Push verification successful"


      - name: Rollback on failure (Direct push)
        if: env.mode == 'direct' && failure()
        working-directory: homebrew-tap
        run: |
          echo "‚ùå Workflow failed, initiating rollback..."

          if [ -n "${{ env.backup_commit }}" ]; then
            echo "üîÑ Rolling back to commit: ${{ env.backup_commit }}"

            # Reset to backup commit
            git reset --hard ${{ env.backup_commit }}

            # Force push to restore previous state
            git push --force origin main

            echo "‚úÖ Rollback completed"
          else
            echo "‚ö†Ô∏è No backup commit found, manual intervention required"
          fi

      # ========================
      # PR MODE (TRADITIONAL)
      # ========================

      - name: Update formula (PR mode)
        if: env.mode == 'pr'
        working-directory: homebrew-tap
        run: |
          # Create new branch for the update with timestamp to avoid conflicts
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="auto-update-v${{ steps.release.outputs.version }}-${TIMESTAMP}"

          echo "üåø Creating branch: $BRANCH_NAME"

          # Check if a similar branch exists and clean up old ones
          echo "üßπ Cleaning up old auto-update branches..."
          git branch -r | grep "origin/auto-update-v${{ steps.release.outputs.version }}" | head -5 | while read -r branch; do
            branch_name=$(echo "$branch" | sed 's|origin/||')
            if [ "$branch_name" != "$BRANCH_NAME" ]; then
              echo "üóëÔ∏è Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" || echo "‚ö†Ô∏è Could not delete $branch_name (may not exist)"
            fi
          done

          # Create new branch
          git checkout -b "$BRANCH_NAME"

          # Update the formula file
          echo "üìù Updating formula with new version and SHA256..."

          # Use sed to update any URL pattern to the new GitHub release URL
          sed -i 's|url ".*"|url "${{ steps.release.outputs.tarball_url }}"|g' ${{ env.FORMULA_FILE }}
          sed -i 's|sha256 ".*"|sha256 "${{ steps.sha256.outputs.sha256 }}"|g' ${{ env.FORMULA_FILE }}

          # Show the changes
          echo "üìã Formula changes:"
          git diff ${{ env.FORMULA_FILE }}

      - name: Commit and create pull request (PR mode)
        if: env.mode == 'pr'
        working-directory: homebrew-tap
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
        run: |
          # Get the branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="auto-update-v${{ steps.release.outputs.version }}-${TIMESTAMP}"

          # Configure git
          git config user.name "rxiv-maker-bot"
          git config user.email "noreply@henriqueslab.org"

          # Commit changes
          git add ${{ env.FORMULA_FILE }}
          git commit -m "chore: update rxiv-maker to v${{ steps.release.outputs.version }}

          Auto-generated update from rxiv-maker release v${{ steps.release.outputs.version }}

          - Updated URL to new release tarball
          - Updated SHA256 hash: ${{ steps.sha256.outputs.sha256 }}

          ü§ñ Generated by GitHub Actions from ${{ github.repository }}"

          # Push branch with retry logic
          echo "üì§ Pushing branch: $BRANCH_NAME"

          PUSH_SUCCESS=false
          for attempt in {1..3}; do
            echo "üîÑ Push attempt $attempt/3..."

            if git push origin "$BRANCH_NAME"; then
              echo "‚úÖ Successfully pushed branch on attempt $attempt"
              PUSH_SUCCESS=true
              break
            else
              echo "‚ùå Push failed on attempt $attempt"

              if [ $attempt -lt 3 ]; then
                echo "‚è≥ Waiting 10 seconds before retry..."
                sleep 10

                # Try to fetch latest changes and rebase if needed
                echo "üîÑ Fetching latest changes..."
                git fetch origin main

                # Generate new unique branch name for retry
                RETRY_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
                NEW_BRANCH_NAME="auto-update-v${{ steps.release.outputs.version }}-${RETRY_TIMESTAMP}"
                echo "üåø Trying with new branch name: $NEW_BRANCH_NAME"

                git checkout -b "$NEW_BRANCH_NAME"
                BRANCH_NAME="$NEW_BRANCH_NAME"
              fi
            fi
          done

          if [ "$PUSH_SUCCESS" != "true" ]; then
            echo "‚ùå Failed to push after 3 attempts"
            echo "üîç Checking remote branches..."
            git branch -r | grep "auto-update" || echo "No auto-update branches found"
            echo "üìä Repository status:"
            git status
            exit 1
          fi

          # Create pull request using GitHub CLI
          echo "üìã Creating pull request..."

          # Check if PR already exists for this version
          EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number' || echo "")

          if [ -n "$EXISTING_PR" ]; then
            echo "üìù Pull request already exists: #$EXISTING_PR"
            echo "üîó PR URL: $(gh pr view $EXISTING_PR --json url --jq '.url')"
          else
            gh pr create \
              --title "üöÄ Auto-update rxiv-maker to v${{ steps.release.outputs.version }}" \
              --body "$(cat <<'EOF'
          ## üì¶ Automatic Formula Update

          This PR automatically updates the rxiv-maker Homebrew formula to version **v${{ steps.release.outputs.version }}**.

          ### üîÑ Changes Made
          - ‚úÖ Updated release URL to: `${{ steps.release.outputs.tarball_url }}`
          - ‚úÖ Updated SHA256 hash to: `${{ steps.sha256.outputs.sha256 }}`

          ### üß™ Testing
          After merging, the formula can be tested with:
          ```bash
          brew tap HenriquesLab/rxiv-maker
          brew install rxiv-maker
          rxiv --version
          ```

          ### ü§ñ Automation
          This PR was automatically generated by the [rxiv-maker repository](https://github.com/${{ github.repository }}) GitHub Actions workflow.

          **Release**: ${{ github.event.release.html_url }}
          **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          EOF
          )" \
              --head "$BRANCH_NAME" \
              --base main

            echo "‚úÖ Pull request created successfully"
          fi

      - name: Unified Summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ‚úÖ Homebrew Formula Update Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "${{ env.mode }}" == "direct" ]; then
              echo "**Mode**: üöÄ Direct Push (Streamlined)" >> $GITHUB_STEP_SUMMARY
              echo "**Status**: ‚úÖ Formula updated and pushed directly to main" >> $GITHUB_STEP_SUMMARY
              echo "**Validation**: All tests passed before push" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "üç∫ **Users can now install immediately with**: \`brew install HenriquesLab/rxiv-maker/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Mode**: üìã Pull Request (Traditional)" >> $GITHUB_STEP_SUMMARY
              echo "**Status**: ‚úÖ Pull request created successfully" >> $GITHUB_STEP_SUMMARY
              echo "**Next Steps**: Review and merge the auto-generated pull request" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: v${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tarball URL**: ${{ steps.release.outputs.tarball_url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **SHA256**: \`${{ steps.sha256.outputs.sha256 }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Repository**: [${{ env.HOMEBREW_TAP_REPO }}](https://github.com/${{ env.HOMEBREW_TAP_REPO }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ùå Homebrew Formula Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Version**: v${{ steps.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "**Mode**: ${{ env.mode == 'direct' && 'üöÄ Direct Push' || 'üìã Pull Request' }}" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: Update failed" >> $GITHUB_STEP_SUMMARY

            if [ "${{ env.mode }}" == "direct" ]; then
              echo "**Action**: Automatic rollback initiated" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Action**: Manual review required" >> $GITHUB_STEP_SUMMARY
            fi
          fi
