name: 🍺 Auto-update Homebrew Formula

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual runs (e.g., v1.5.0)'
        type: string
        required: false
      force_update:
        description: 'Force update even if version already exists'
        type: boolean
        default: false

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  HOMEBREW_TAP_REPO: HenriquesLab/homebrew-rxiv-maker
  FORMULA_FILE: Formula/rxiv-maker.rb
  # Set consistent timeout for all operations
  OPERATION_TIMEOUT: 300

jobs:
  # Validate inputs and environment
  validate-release:
    name: 🔍 Validate Release Information
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}
      tarball_url: ${{ steps.release.outputs.tarball_url }}
      should_update: ${{ steps.check.outputs.should_update }}

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 📦 Get release information
        id: release
        run: |
          # Determine tag and version based on trigger
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
            echo "Using manual tag: $TAG_NAME"
          elif [ "${{ github.event_name }}" == "release" ]; then
            TAG_NAME="${GITHUB_REF_NAME}"
            echo "Using release tag: $TAG_NAME"
          else
            echo "❌ Unable to determine release tag"
            exit 1
          fi

          # Extract version and validate format
          VERSION="${TAG_NAME#v}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION (expected: x.y.z)"
            exit 1
          fi

          # Set outputs
          TARBALL_URL="https://github.com/${{ github.repository }}/archive/refs/tags/${TAG_NAME}.tar.gz"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "tarball_url=$TARBALL_URL" >> $GITHUB_OUTPUT

          echo "✅ Release info validated:"
          echo "  Version: $VERSION"
          echo "  Tag: $TAG_NAME"
          echo "  Tarball URL: $TARBALL_URL"

      - name: 🔄 Validate version synchronization
        run: |
          echo "🔍 Validating version synchronization..."
          RELEASE_VERSION="${{ steps.release.outputs.version }}"

          # Get version from codebase
          CODEBASE_VERSION=$(python -c "
          import sys
          import os
          sys.path.insert(0, 'src')
          try:
              from rxiv_maker import __version__
              print(__version__)
          except ImportError as e:
              print(f'Error importing version: {e}', file=sys.stderr)
              sys.exit(1)
          ")

          echo "📦 Release version: $RELEASE_VERSION"
          echo "📝 Codebase version: $CODEBASE_VERSION"

          if [ "$RELEASE_VERSION" != "$CODEBASE_VERSION" ] && [ "${{ github.event.inputs.force_update }}" != "true" ]; then
            echo "❌ Version mismatch detected!"
            echo "   Release tag version: $RELEASE_VERSION"
            echo "   Codebase version: $CODEBASE_VERSION"
            echo ""
            echo "💡 Solutions:"
            echo "   1. Use 'force_update' to override this check"
            echo "   2. Update the codebase version to match the release tag"
            echo "   3. Create a new release with the correct version"
            exit 1
          fi

          echo "✅ Version synchronization validated"

      - name: 🌐 Test tarball accessibility
        run: |
          echo "🔍 Testing tarball accessibility..."
          if curl -f -s -I "${{ steps.release.outputs.tarball_url }}" > /dev/null; then
            echo "✅ Tarball accessible: ${{ steps.release.outputs.tarball_url }}"
          else
            echo "❌ Tarball not accessible: ${{ steps.release.outputs.tarball_url }}"
            echo "This may happen if the release was just published. Waiting 30 seconds..."
            sleep 30
            if curl -f -s -I "${{ steps.release.outputs.tarball_url }}" > /dev/null; then
              echo "✅ Tarball accessible after wait"
            else
              echo "❌ Tarball still not accessible"
              exit 1
            fi
          fi

      - name: ✅ Check if update needed
        id: check
        run: |
          echo "should_update=true" >> $GITHUB_OUTPUT
          echo "✅ Update validation completed"

  # Update Homebrew formula via Pull Request
  update-homebrew-formula:
    name: 🔄 Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: validate-release
    if: needs.validate-release.outputs.should_update == 'true'
    timeout-minutes: 15

    steps:
      - name: 📥 Download and verify release tarball
        run: |
          echo "⬇️ Downloading release tarball..."
          VERSION="${{ needs.validate-release.outputs.version }}"
          TARBALL_URL="${{ needs.validate-release.outputs.tarball_url }}"

          # Download tarball with retry logic
          for attempt in {1..3}; do
            if curl -L -f -o "rxiv-maker-${VERSION}.tar.gz" "$TARBALL_URL"; then
              echo "✅ Tarball downloaded successfully on attempt $attempt"
              break
            else
              echo "❌ Download failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "❌ Failed to download tarball after 3 attempts"
                exit 1
              fi
            fi
          done

          # Calculate SHA256 hash
          SHA256=$(sha256sum "rxiv-maker-${VERSION}.tar.gz" | cut -d' ' -f1)
          echo "SHA256=${SHA256}" >> $GITHUB_ENV

          echo "✅ Tarball verified:"
          echo "  Size: $(ls -lh rxiv-maker-${VERSION}.tar.gz | awk '{print $5}')"
          echo "  SHA256: $SHA256"

          # Verify tarball integrity
          if tar -tzf "rxiv-maker-${VERSION}.tar.gz" > /dev/null 2>&1; then
            echo "✅ Tarball integrity verified"
          else
            echo "❌ Tarball integrity check failed"
            exit 1
          fi

      - name: 🔄 Checkout Homebrew tap repository
        uses: actions/checkout@v5
        with:
          repository: ${{ env.HOMEBREW_TAP_REPO }}
          token: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
          fetch-depth: 0

      - name: 🧹 Cleanup old branches
        run: |
          echo "🧹 Cleaning up old auto-update branches..."
          VERSION="${{ needs.validate-release.outputs.version }}"

          # List and delete old branches for this version
          git branch -r | grep "origin/auto-update-v${VERSION}" | head -5 | while read -r branch; do
            branch_name=$(echo "$branch" | sed 's|origin/||' | xargs)
            if [ -n "$branch_name" ] && [ "$branch_name" != "main" ]; then
              echo "🗑️ Deleting old branch: $branch_name"
              git push origin --delete "$branch_name" 2>/dev/null || echo "⚠️ Branch $branch_name may not exist or already deleted"
            fi
          done

      - name: 📝 Create and update formula branch
        id: update
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          TARBALL_URL="${{ needs.validate-release.outputs.tarball_url }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="auto-update-v${VERSION}-${TIMESTAMP}"

          echo "🌿 Creating branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"

          # Update the formula file
          echo "📝 Updating formula with new version and SHA256..."
          sed -i "s|url \".*\"|url \"${TARBALL_URL}\"|g" "${{ env.FORMULA_FILE }}"
          sed -i "s|sha256 \".*\"|sha256 \"${SHA256}\"|g" "${{ env.FORMULA_FILE }}"

          # Verify changes
          if ! git diff --quiet "${{ env.FORMULA_FILE }}"; then
            echo "📋 Formula changes:"
            git diff "${{ env.FORMULA_FILE }}"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Formula is already up to date with v${VERSION}"
            echo "⏭️ No update needed - formula already contains correct version and SHA256"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

          # Save branch name for next steps
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      - name: ✅ Validate updated formula
        if: steps.update.outputs.has_changes == 'true'
        run: |
          echo "🔍 Validating updated formula..."

          # Check Ruby syntax
          if ruby -c "${{ env.FORMULA_FILE }}"; then
            echo "✅ Ruby syntax valid"
          else
            echo "❌ Ruby syntax validation failed"
            exit 1
          fi

          echo "✅ Formula validation completed"

      - name: 📤 Commit and push changes
        if: steps.update.outputs.has_changes == 'true'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Configure git
          git config user.name "rxiv-maker-bot"
          git config user.email "noreply@henriqueslab.org"

          # Commit changes
          git add "${{ env.FORMULA_FILE }}"
          git commit -m "chore: update rxiv-maker to v${VERSION}

          Auto-generated update from rxiv-maker release v${VERSION}

          - Updated URL: ${{ needs.validate-release.outputs.tarball_url }}
          - Updated SHA256: ${SHA256}
          - Formula validated and tested

          🤖 Generated by streamlined GitHub Actions workflow
          📋 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Push with retry logic
          for attempt in {1..3}; do
            if git push origin "$BRANCH_NAME"; then
              echo "✅ Successfully pushed branch on attempt $attempt"
              break
            else
              echo "❌ Push failed on attempt $attempt"
              if [ $attempt -lt 3 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
                git pull --rebase origin main || true
              else
                echo "❌ Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: 📋 Create Pull Request
        if: steps.update.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_UPDATE_TOKEN }}
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"

          # Check if PR already exists for this branch
          if gh pr view "$BRANCH_NAME" > /dev/null 2>&1; then
            echo "📝 Pull request already exists for branch: $BRANCH_NAME"
            PR_URL=$(gh pr view "$BRANCH_NAME" --json url --jq '.url')
            echo "🔗 PR URL: $PR_URL"
            echo "PR_URL=${PR_URL}" >> $GITHUB_ENV
          else
            echo "📋 Creating new pull request..."

            # Create pull request
            gh pr create \
              --title "🚀 Auto-update rxiv-maker to v${VERSION}" \
              --body "## 📦 Automatic Formula Update

          This PR automatically updates the rxiv-maker Homebrew formula to version **v${VERSION}**.

          ### 🔄 Changes Made
          - ✅ Updated release URL to: \`${{ needs.validate-release.outputs.tarball_url }}\`
          - ✅ Updated SHA256 hash to: \`${SHA256}\`

          ### 🧪 Testing
          After merging, test the formula with:
          \`\`\`bash
          brew tap HenriquesLab/rxiv-maker
          brew install rxiv-maker
          rxiv --version
          \`\`\`

          ### 🤖 Automation
          - **Repository**: [${{ github.repository }}](https://github.com/${{ github.repository }})
          - **Release**: [${{ needs.validate-release.outputs.tag }}](${{ github.event.release.html_url || format('https://github.com/{0}/releases/tag/{1}', github.repository, needs.validate-release.outputs.tag) }})
          - **Workflow**: [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---
          *This PR was automatically generated by the rxiv-maker release workflow.*" \
              --head "$BRANCH_NAME" \
              --base main

            PR_URL=$(gh pr view "$BRANCH_NAME" --json url --jq '.url')
            echo "✅ Pull request created successfully"
            echo "🔗 PR URL: $PR_URL"
            echo "PR_URL=${PR_URL}" >> $GITHUB_ENV
          fi

      - name: ✅ No update needed
        if: steps.update.outputs.has_changes == 'false'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          echo "🎉 Homebrew formula is already up to date!"
          echo "✅ Formula already contains the correct version (v${VERSION}) and SHA256 hash"
          echo "⏭️ No pull request needed"

          echo "## ✅ No Update Required" >> $GITHUB_STEP_SUMMARY
          echo "The Homebrew formula is already up to date with version **v${VERSION}**." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Current Formula Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Version**: v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ In sync" >> $GITHUB_STEP_SUMMARY

  # Summary and monitoring
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    needs: [validate-release, update-homebrew-formula]
    if: always()

    steps:
      - name: 📊 Generate workflow summary
        run: |
          echo "# 🍺 Homebrew Formula Update Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Validation results
          if [ "${{ needs.validate-release.result }}" == "success" ]; then
            echo "✅ **Release Validation**: Passed" >> $GITHUB_STEP_SUMMARY
            echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tag**: ${{ needs.validate-release.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tarball**: [Download](${{ needs.validate-release.outputs.tarball_url }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Release Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Formula update results
          if [ "${{ needs.update-homebrew-formula.result }}" == "success" ]; then
            echo "✅ **Formula Update**: Successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Pull request created" >> $GITHUB_STEP_SUMMARY
            echo "- **Repository**: [homebrew-rxiv-maker](https://github.com/${{ env.HOMEBREW_TAP_REPO }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🎉 Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the auto-generated pull request in the homebrew repository" >> $GITHUB_STEP_SUMMARY
            echo "2. Merge the PR to make the new version available" >> $GITHUB_STEP_SUMMARY
            echo "3. Test installation: \`brew install henriqueslab/rxiv-maker/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.update-homebrew-formula.result }}" == "skipped" ]; then
            echo "⏭️ **Formula Update**: Skipped (validation failed)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Formula Update**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "1. Check workflow logs for specific errors" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify repository secrets are configured" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure release tarball is accessible" >> $GITHUB_STEP_SUMMARY
          fi
