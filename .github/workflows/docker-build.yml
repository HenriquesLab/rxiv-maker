name: Docker Build & Release

on:
  push:
    branches: [main, dev]
    paths:
      - 'src/docker/**'
      - 'src/py/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/docker-build.yml'

  pull_request:
    branches: [main, dev]
    paths:
      - 'src/docker/**'
      - 'src/py/**'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/docker-build.yml'

  release:
    types: [published]

  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: henriqueslab/rxiv-maker-base

jobs:
  # Simple change detection
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.decision.outputs.should-build }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Build decision
        id: decision
        run: |
          SHOULD_BUILD=false

          # Always build on manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SHOULD_BUILD=true
            echo "üöÄ Manual trigger - building"
          # Always build on pull request for testing
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            SHOULD_BUILD=true
            echo "üîÑ Pull request - building for testing"
          # Always build on release
          elif [ "${{ github.event_name }}" == "release" ]; then
            SHOULD_BUILD=true
            echo "üè∑Ô∏è Release - building"
          # Build on push to main/dev
          elif [ "${{ github.event_name }}" == "push" ]; then
            if [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/dev" ]; then
              SHOULD_BUILD=true
              echo "üöÄ Push to main/dev - building"
            fi
          fi

          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "Build decision: $SHOULD_BUILD"

  # Build Docker images
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-build == 'true'
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=sha-

      - name: Prepare platform name for file paths
        id: platform
        run: |
          # Convert platform name to safe filename (replace / with -)
          SAFE_PLATFORM=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "safe_name=$SAFE_PLATFORM" >> $GITHUB_OUTPUT
          echo "Platform: ${{ matrix.platform }} -> Safe name: $SAFE_PLATFORM"

      - name: Build platform-specific image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/docker/images/base/Dockerfile
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: false
          cache-from: type=gha,scope=build-${{ matrix.platform }}
          cache-to: type=gha,scope=build-${{ matrix.platform }},mode=max
          outputs: type=docker,dest=/tmp/image-${{ steps.platform.outputs.safe_name }}.tar
        continue-on-error: false
        timeout-minutes: 45  # Explicit timeout per build

      - name: Verify build output
        run: |
          IMAGE_FILE="/tmp/image-${{ steps.platform.outputs.safe_name }}.tar"
          if [ -f "$IMAGE_FILE" ]; then
            echo "‚úÖ Build artifact created: $IMAGE_FILE"
            echo "üì¶ Size: $(du -h $IMAGE_FILE | cut -f1)"

            # Basic integrity check
            if tar -tf "$IMAGE_FILE" >/dev/null 2>&1; then
              echo "‚úÖ Image tar file integrity verified"
            else
              echo "‚ùå Image tar file integrity check failed"
              exit 1
            fi
          else
            echo "‚ùå Build artifact missing: $IMAGE_FILE"
            exit 1
          fi

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ steps.platform.outputs.safe_name }}
          path: /tmp/image-${{ steps.platform.outputs.safe_name }}.tar
          retention-days: 1

  # Test built images
  test-images:
    name: Test Images
    runs-on: ubuntu-latest
    needs: [detect-changes, build-images]
    if: needs.detect-changes.outputs.should-build == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Load and test images
        run: |
          echo "Loading built images..."
          LOADED_IMAGES=0

          # Load images with error checking
          find artifacts -name "*.tar" -type f | while read image_file; do
            if [ -f "$image_file" ]; then
              echo "Loading $image_file..."
              if docker load --input "$image_file"; then
                echo "‚úÖ Successfully loaded $image_file"
                LOADED_IMAGES=$((LOADED_IMAGES + 1))
              else
                echo "‚ùå Failed to load $image_file"
                exit 1
              fi
            fi
          done

          echo "üß™ Testing image functionality..."

          # Test with retry logic
          for attempt in {1..3}; do
            echo "üéØ Test attempt $attempt..."

            if docker run --rm --timeout=60s ${{ env.IMAGE_NAME }}:latest python3 -c "
            import sys
            print(f'Python version: {sys.version}')

            # Test critical dependencies
            try:
                import json, os, subprocess
                print('‚úÖ Core Python modules available')
            except ImportError as e:
                print(f'‚ùå Missing core modules: {e}')
                sys.exit(1)

            print('‚úÖ Docker image test successful!')
            "; then
              echo "‚úÖ Image test passed on attempt $attempt"
              break
            else
              echo "‚ùå Image test failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Image test failed after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

  # Push to registry (conditional)
  push-to-registry:
    name: Push to Registry
    runs-on: ubuntu-latest
    needs: [detect-changes, build-images, test-images]
    if: |
      needs.detect-changes.outputs.should-build == 'true' &&
      (
        github.ref == 'refs/heads/main' ||
        github.event_name == 'release' ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.push_to_registry == 'true')
      )

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PUSH }}

      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: src/docker/images/base/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: |
            type=gha,scope=build-linux-amd64
            type=gha,scope=build-linux-arm64
        continue-on-error: false
        timeout-minutes: 45

      - name: Verify pushed images
        run: |
          echo "üîç Verifying pushed images..."

          # Extract main tag for verification
          MAIN_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Verifying primary tag: $MAIN_TAG"

          # Retry logic for image verification
          for attempt in {1..3}; do
            echo "üéØ Verification attempt $attempt..."

            if docker pull "$MAIN_TAG" && docker run --rm --timeout=30s "$MAIN_TAG" python3 --version; then
              echo "‚úÖ Image verification successful on attempt $attempt"
              break
            else
              echo "‚ùå Image verification failed on attempt $attempt"
              if [ $attempt -eq 3 ]; then
                echo "‚ùå Image verification failed after 3 attempts"
                echo "‚ö†Ô∏è Images may have been pushed but are not immediately available"
                # Don't fail completely as this might be a temporary registry issue
                echo "Images pushed but verification failed - check registry manually" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done

  # Success summary
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-images, test-images, push-to-registry]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## üê≥ Docker Build & Release Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-changes.outputs.should-build }}" == "true" ]; then
            echo "**Build Status:** ‚úÖ Executed" >> $GITHUB_STEP_SUMMARY
            echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Build | ${{ needs.build-images.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Test | ${{ needs.test-images.result }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Push | ${{ needs.push-to-registry.result }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Build Status:** ‚è≠Ô∏è Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
            echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          fi
