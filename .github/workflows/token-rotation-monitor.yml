name: 🔑 Token Rotation Monitor

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  
  workflow_dispatch:
    inputs:
      alert_threshold_days:
        description: 'Alert threshold in days before token expiration'
        required: false
        default: '30'
        type: string
      
      force_check:
        description: 'Force check all tokens regardless of last check time'
        type: boolean
        default: false

permissions:
  contents: read
  actions: read
  issues: write

env:
  ALERT_THRESHOLD_DAYS: ${{ github.event.inputs.alert_threshold_days || '30' }}
  CRITICAL_THRESHOLD_DAYS: 7
  TOKEN_ROTATION_LABEL: "token-rotation"

jobs:
  # Monitor token health and expiration
  token-health-monitor:
    name: 🔍 Token Health Assessment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      tokens_checked: ${{ steps.monitor.outputs.tokens_checked }}
      tokens_expiring_soon: ${{ steps.monitor.outputs.tokens_expiring_soon }}
      tokens_critical: ${{ steps.monitor.outputs.tokens_critical }}
      alert_required: ${{ steps.monitor.outputs.alert_required }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: 🔍 Monitor token health and expiration
        id: monitor
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔑 Starting token health assessment..."
          echo "Alert threshold: $ALERT_THRESHOLD_DAYS days"
          echo "Critical threshold: $CRITICAL_THRESHOLD_DAYS days"
          
          TOKENS_CHECKED=0
          TOKENS_EXPIRING_SOON=0
          TOKENS_CRITICAL=0
          ALERT_REQUIRED=false
          
          # Function to check token expiration via GitHub API
          check_token_expiration() {
            local token_name="$1"
            local token_value="$2"
            
            echo "🔍 Checking token: $token_name"
            
            # Try to get token info via GitHub API
            local token_info
            if token_info=$(curl -sf -H "Authorization: token $token_value" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user" 2>/dev/null); then
              
              echo "✅ Token $token_name is valid and accessible"
              TOKENS_CHECKED=$((TOKENS_CHECKED + 1))
              
              # Check if we can get expiration info (for fine-grained tokens)
              if curl -sf -H "Authorization: token $token_value" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/user/installations" >/dev/null 2>&1; then
                echo "ℹ️ Token $token_name appears to be a GitHub App token (self-rotating)"
              else
                echo "⚠️ Token $token_name appears to be a classic PAT (manual rotation required)"
              fi
            else
              echo "❌ Token $token_name is invalid or inaccessible"
              TOKENS_CRITICAL=$((TOKENS_CRITICAL + 1))
              ALERT_REQUIRED=true
            fi
          }
          
          # Check DISPATCH_PAT if available
          if [ -n "${{ secrets.DISPATCH_PAT }}" ]; then
            check_token_expiration "DISPATCH_PAT" "${{ secrets.DISPATCH_PAT }}"
          else
            echo "ℹ️ DISPATCH_PAT not available for checking"
          fi
          
          # Check HOMEBREW_UPDATE_TOKEN accessibility (cross-repository)
          echo "🍺 Checking Homebrew repository access..."
          if gh repo view HenriquesLab/homebrew-rxiv-maker >/dev/null 2>&1; then
            echo "✅ Homebrew repository is accessible"
            TOKENS_CHECKED=$((TOKENS_CHECKED + 1))
          else
            echo "❌ Homebrew repository access failed - HOMEBREW_UPDATE_TOKEN may be invalid"
            TOKENS_CRITICAL=$((TOKENS_CRITICAL + 1))
            ALERT_REQUIRED=true
          fi
          
          # Check Docker Hub token by attempting a simple API call
          echo "🐳 Checking Docker Hub token accessibility..."
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PUSH }}" ]; then
            # Use Docker CLI to check token validity
            if echo "${{ secrets.DOCKER_PUSH }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin docker.io >/dev/null 2>&1; then
              echo "✅ Docker Hub credentials are valid"
              docker logout >/dev/null 2>&1 || true
              TOKENS_CHECKED=$((TOKENS_CHECKED + 1))
            else
              echo "❌ Docker Hub credentials are invalid"
              TOKENS_CRITICAL=$((TOKENS_CRITICAL + 1))
              ALERT_REQUIRED=true
            fi
          else
            echo "ℹ️ Docker Hub credentials not available for checking"
          fi
          
          # Set outputs
          echo "tokens_checked=$TOKENS_CHECKED" >> $GITHUB_OUTPUT
          echo "tokens_expiring_soon=$TOKENS_EXPIRING_SOON" >> $GITHUB_OUTPUT
          echo "tokens_critical=$TOKENS_CRITICAL" >> $GITHUB_OUTPUT
          echo "alert_required=$ALERT_REQUIRED" >> $GITHUB_OUTPUT
          
          echo "📊 Token health summary:"
          echo "  Tokens checked: $TOKENS_CHECKED"
          echo "  Tokens expiring soon: $TOKENS_EXPIRING_SOON"
          echo "  Critical token issues: $TOKENS_CRITICAL"
          echo "  Alert required: $ALERT_REQUIRED"

  # Document token rotation procedures
  token-rotation-guide:
    name: 📋 Update Token Rotation Guide
    runs-on: ubuntu-latest
    needs: token-health-monitor
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: 📋 Generate/update token rotation documentation
        run: |
          echo "📝 Creating token rotation guide..."
          
          cat > .github/TOKEN-ROTATION-GUIDE.md << 'EOF'
          # 🔑 Token Rotation Guide
          
          This document provides procedures for rotating tokens used in the rxiv-maker GitHub Actions workflows.
          
          ## 📊 Token Inventory
          
          | Token Name | Type | Usage | Rotation Schedule | Owner |
          |------------|------|-------|-------------------|-------|
          | `DISPATCH_PAT` | Personal Access Token | Cross-repository workflow triggers, API calls | Every 90 days | @maintainer |
          | `DOCKER_USERNAME` | Docker Hub Username | Docker image publishing | N/A (username) | @maintainer |
          | `DOCKER_PUSH` | Docker Hub Token | Docker image publishing | Every 365 days | @maintainer |
          | `HOMEBREW_UPDATE_TOKEN` | Fine-grained PAT | Homebrew repository access | Every 90 days | @maintainer |
          | `GITHUB_TOKEN` | Automatic | Repository operations | Automatic | GitHub |
          
          ## 🔄 Rotation Procedures
          
          ### DISPATCH_PAT (Personal Access Token)
          
          **Frequency:** Every 90 days  
          **Owner:** Repository maintainer
          
          #### Steps:
          1. **Generate New Token:**
             - Go to GitHub → Settings → Developer settings → Personal access tokens
             - Create new token with scopes: `repo`, `workflow`, `issues`
             - Set expiration for 90 days from creation
          
          2. **Update Repository Secret:**
             - Go to repository → Settings → Secrets and variables → Actions
             - Update `DISPATCH_PAT` with new token value
          
          3. **Test Token:**
             - Run cross-repository health monitor workflow
             - Verify all external API calls succeed
          
          4. **Revoke Old Token:**
             - Return to GitHub token settings
             - Delete the old token
          
          ### DOCKER_PUSH (Docker Hub Token)
          
          **Frequency:** Every 365 days  
          **Owner:** Repository maintainer
          
          #### Steps:
          1. **Generate New Token:**
             - Go to Docker Hub → Account Settings → Security
             - Create new access token with push permissions
             - Copy token value (shown only once)
          
          2. **Update Repository Secret:**
             - Go to repository → Settings → Secrets and variables → Actions
             - Update `DOCKER_PUSH` with new token value
          
          3. **Test Token:**
             - Trigger Docker build workflow
             - Verify image push succeeds
          
          4. **Revoke Old Token:**
             - Return to Docker Hub security settings
             - Delete the old token
          
          ### HOMEBREW_UPDATE_TOKEN (Fine-grained PAT)
          
          **Frequency:** Every 90 days  
          **Owner:** Repository maintainer
          
          #### Steps:
          1. **Generate New Token:**
             - Go to GitHub → Settings → Developer settings → Personal access tokens (beta)
             - Create fine-grained token for `HenriquesLab/homebrew-rxiv-maker` repository
             - Grant permissions: `Contents: Write`, `Pull requests: Write`
             - Set expiration for 90 days
          
          2. **Update Repository Secret:**
             - Go to repository → Settings → Secrets and variables → Actions
             - Update `HOMEBREW_UPDATE_TOKEN` with new token value
          
          3. **Test Token:**
             - Trigger homebrew update workflow
             - Verify formula update succeeds
          
          4. **Revoke Old Token:**
             - Delete old token from GitHub settings
          
          ## 🚨 Emergency Rotation
          
          If a token is compromised or expires unexpectedly:
          
          1. **Immediately revoke the compromised token**
          2. **Generate emergency replacement token**
          3. **Update repository secret**
          4. **Test critical workflows**
          5. **Create incident post-mortem**
          
          ## 📅 Rotation Calendar
          
          Set up calendar reminders for token rotation:
          
          - **Monthly:** Review token health dashboard
          - **Quarterly:** Rotate PAT tokens (DISPATCH_PAT, HOMEBREW_UPDATE_TOKEN)
          - **Annually:** Rotate Docker Hub tokens
          - **As needed:** Emergency rotation for compromised tokens
          
          ## 🔍 Monitoring
          
          Token health is monitored via:
          
          - **Automated weekly checks** (Token Rotation Monitor workflow)
          - **Cross-repository health monitor** (includes token validation)
          - **Security audit** (validates token scoping)
          
          ## 📋 Checklist Template
          
          Use this checklist when rotating tokens:
          
          - [ ] Old token expiration date noted
          - [ ] New token generated with correct scopes/permissions
          - [ ] New token expiration set appropriately
          - [ ] Repository secret updated
          - [ ] Test workflows triggered and verified
          - [ ] Old token revoked/deleted
          - [ ] Calendar reminder set for next rotation
          - [ ] Team notified of rotation completion
          
          ## 🆘 Troubleshooting
          
          ### Common Issues:
          
          **Token validation fails:**
          - Verify token has correct permissions
          - Check token isn't expired
          - Ensure repository access is granted
          
          **Workflows fail after rotation:**
          - Check secret name matches exactly
          - Verify token scopes are sufficient
          - Test token manually via API calls
          
          **Cross-repository access fails:**
          - Ensure token has access to target repository
          - Verify organization permissions if applicable
          - Check repository visibility settings
          
          ---
          
          **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Next Review:** $(date -d '+1 month' '+%Y-%m-%d' 2>/dev/null || echo 'TBD')
          EOF
          
          echo "✅ Token rotation guide updated"

      - name: 📊 Generate token rotation status
        run: |
          echo "## 🔑 Token Rotation Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Last Check:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Tokens Checked:** ${{ needs.token-health-monitor.outputs.tokens_checked }}" >> $GITHUB_STEP_SUMMARY
          echo "**Critical Issues:** ${{ needs.token-health-monitor.outputs.tokens_critical }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.token-health-monitor.outputs.tokens_critical }}" -gt 0 ]; then
            echo "🚨 **Action Required:** ${{ needs.token-health-monitor.outputs.tokens_critical }} token(s) have critical issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Review token health assessment logs above" >> $GITHUB_STEP_SUMMARY
            echo "2. Rotate affected tokens following [Token Rotation Guide](.github/TOKEN-ROTATION-GUIDE.md)" >> $GITHUB_STEP_SUMMARY
            echo "3. Test workflows after rotation" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All tokens are healthy**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- [Token Rotation Guide](.github/TOKEN-ROTATION-GUIDE.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Audit Report](.github/SECURITY-AUDIT.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cross-Repository Health Monitor](.github/workflows/cross-repository-health-monitor.yml)" >> $GITHUB_STEP_SUMMARY

  # Create alert issue for token expiration
  token-expiration-alert:
    name: 🚨 Token Expiration Alert
    runs-on: ubuntu-latest
    needs: token-health-monitor
    if: needs.token-health-monitor.outputs.alert_required == 'true'
    timeout-minutes: 5

    steps:
      - name: 🚨 Create token rotation alert issue
        env:
          GH_TOKEN: ${{ secrets.DISPATCH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          echo "🚨 Creating token rotation alert issue..."
          
          ISSUE_TITLE="🔑 Token Rotation Alert - $(date -u '+%Y-%m-%d')"
          ISSUE_BODY="## 🚨 Token Rotation Required
          
          The automated token health monitor has detected critical issues with repository tokens.
          
          ### 🔍 Issue Summary
          
          - **Tokens Checked:** ${{ needs.token-health-monitor.outputs.tokens_checked }}
          - **Critical Issues:** ${{ needs.token-health-monitor.outputs.tokens_critical }}
          - **Alert Threshold:** ${{ env.ALERT_THRESHOLD_DAYS }} days
          
          ### 🎯 Required Actions
          
          1. **Review Token Status:**
             - Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed information
             - Identify which tokens are failing or expired
          
          2. **Rotate Affected Tokens:**
             - Follow the [Token Rotation Guide](.github/TOKEN-ROTATION-GUIDE.md)
             - Update repository secrets with new token values
             - Test workflows after rotation
          
          3. **Verify Resolution:**
             - Run token health monitor workflow manually
             - Ensure all tokens are healthy
             - Close this issue once resolved
          
          ### 📋 Token Rotation Checklist
          
          - [ ] DISPATCH_PAT rotated (if required)
          - [ ] DOCKER_PUSH rotated (if required)
          - [ ] HOMEBREW_UPDATE_TOKEN rotated (if required)
          - [ ] All workflows tested after rotation
          - [ ] Calendar reminders updated for next rotation
          
          ### 🆘 Emergency Contacts
          
          If tokens are compromised or critical workflows are failing:
          - Immediately revoke compromised tokens
          - Generate emergency replacements
          - Notify repository maintainers
          
          ---
          
          **Generated by:** Token Rotation Monitor  
          **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})  
          **Created:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          # Check if a recent alert issue already exists
          EXISTING_ISSUES=$(gh issue list --repo "${{ github.repository }}" \
            --label "${{ env.TOKEN_ROTATION_LABEL }}" \
            --state open \
            --created "$(date -d '1 week ago' -I 2>/dev/null || date -j -v-1w '+%Y-%m-%d')" \
            --limit 1 \
            --json number 2>/dev/null || echo "[]")
          
          if [ "$(echo "$EXISTING_ISSUES" | jq length)" -eq 0 ]; then
            echo "Creating new token rotation alert issue..."
            gh issue create \
              --repo "${{ github.repository }}" \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "${{ env.TOKEN_ROTATION_LABEL }},priority:high,security"
            echo "✅ Token rotation alert issue created successfully"
          else
            echo "ℹ️ Recent token rotation alert issue already exists, skipping creation"
          fi