name: Release and Binary Distribution

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.4.8)'
        required: true
        type: string
      skip-tests:
        description: 'Skip comprehensive testing (use with caution)'
        required: false
        default: false
        type: boolean
      skip-package-managers:
        description: 'Skip package manager updates'
        required: false
        default: false
        type: boolean
      dry-run:
        description: 'Dry run - prepare release but do not publish'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: write
  id-token: write  # Required for PyPI trusted publishing
  packages: write  # Required for Docker registry

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1
  DOCKER_BUILDKIT: 1
  REGISTRY: docker.io
  BASE_IMAGE_NAME: henriqueslab/rxiv-maker-base

jobs:
  # Setup and Version Management
  setup:
    name: Setup Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      version-number: ${{ steps.version.outputs.version-number }}
      is-dry-run: ${{ steps.version.outputs.is-dry-run }}
      skip-tests: ${{ steps.version.outputs.skip-tests }}
      skip-package-managers: ${{ steps.version.outputs.skip-package-managers }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Determine release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
            echo "Using manual tag: $VERSION"
          else
            VERSION="${{ github.ref_name }}"
            echo "Using pushed tag: $VERSION"
          fi

          # Extract version number (remove 'v' prefix)
          VERSION_NUMBER="${VERSION#v}"

          # Validate version format
          if [[ ! "$VERSION_NUMBER" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $VERSION_NUMBER (expected: x.y.z)"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "version-number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "is-dry-run=${{ github.event.inputs.dry-run }}" >> $GITHUB_OUTPUT
          echo "skip-tests=${{ github.event.inputs.skip-tests }}" >> $GITHUB_OUTPUT
          echo "skip-package-managers=${{ github.event.inputs.skip-package-managers }}" >> $GITHUB_OUTPUT

          echo "## Release Setup" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry-run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Tests**: ${{ github.event.inputs.skip-tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Package Managers**: ${{ github.event.inputs.skip-package-managers }}" >> $GITHUB_STEP_SUMMARY

      - name: Update version in codebase
        if: steps.version.outputs.is-dry-run != 'true'
        run: |
          VERSION_NUMBER="${{ steps.version.outputs.version-number }}"
          echo "üìù Updating version to $VERSION_NUMBER in codebase..."

          # Update __version__.py
          echo "__version__ = \"$VERSION_NUMBER\"" > src/rxiv_maker/__version__.py

          # Update pyproject.toml version
          sed -i "s/^version = .*/version = \"$VERSION_NUMBER\"/" pyproject.toml

          # Verify updates
          echo "Updated version in:"
          echo "  - src/rxiv_maker/__version__.py: $(cat src/rxiv_maker/__version__.py)"
          echo "  - pyproject.toml version: $(grep '^version = ' pyproject.toml)"

      - name: Commit version updates
        if: steps.version.outputs.is-dry-run != 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add src/rxiv_maker/__version__.py pyproject.toml
          git commit -m "Update version to ${{ steps.version.outputs.version-number }} for release ${{ steps.version.outputs.tag }}" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }} || echo "Failed to push version update"

  # Comprehensive Testing (Optional)
  test:
    name: Release Testing
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.skip-tests != 'true'
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
      fail-fast: true  # Fail fast for releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: release-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Run comprehensive tests
        uses: ./.github/actions/test-execution
        with:
          test-type: comprehensive
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}

      - name: Upload test results
        if: always()
        uses: ./.github/actions/artifact-management
        with:
          action: upload-test-results
          name: release-test-results-${{ matrix.os }}-${{ matrix.python-version }}
          matrix-os: ${{ matrix.os }}
          matrix-python: ${{ matrix.python-version }}

  # Repository Integrity Check
  integrity-check:
    name: Repository Integrity
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.skip-tests != 'true'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run repository integrity checks
        run: |
          chmod +x scripts/safeguards/*.sh scripts/safeguards/*.py
          scripts/safeguards/validate-submodules.sh
          python scripts/safeguards/check-repo-boundaries.py

  # Build Python Packages
  build-python:
    name: Build Python Packages
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [setup, test, integrity-check]
    if: always() && (needs.setup.result == 'success' && (needs.test.result == 'success' || needs.setup.outputs.skip-tests == 'true') && (needs.integrity-check.result == 'success' || needs.setup.outputs.skip-tests == 'true'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'

      - name: Build Python packages
        run: |
          echo "üèóÔ∏è Building Python packages..."
          uv build
          echo "‚úÖ Python packages built successfully"

      - name: Verify packages
        run: |
          echo "üîç Verifying package integrity..."
          python -m pip install --upgrade pip twine
          python -m twine check dist/*

          # Display package info
          ls -la dist/
          echo "Package contents:"
          for file in dist/*; do
            echo "  - $(basename $file): $(stat -c%s $file) bytes"
          done
          echo "‚úÖ Package verification passed"

      - name: Upload Python packages
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: python-packages
          path: dist/
          retention-days: 30

  # Build Cross-Platform Binaries
  build-binaries:
    name: Build Binary (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    needs: [setup, test, integrity-check, build-python]
    if: always() && (needs.setup.result == 'success' && (needs.test.result == 'success' || needs.setup.outputs.skip-tests == 'true') && (needs.integrity-check.result == 'success' || needs.setup.outputs.skip-tests == 'true') && needs.build-python.result == 'success')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: rxiv
            artifact_name: rxiv-maker-linux-x64
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: rxiv.exe
            artifact_name: rxiv-maker-windows-x64
          - os: macos-latest
            platform: macos
            arch: x64
            binary_name: rxiv
            artifact_name: rxiv-maker-macos-x64
          - os: macos-13  # Intel Mac for x64 build
            platform: macos
            arch: x64
            binary_name: rxiv
            artifact_name: rxiv-maker-macos-x64-intel
          - os: macos-latest  # Apple Silicon Mac for arm64 build
            platform: macos
            arch: arm64
            binary_name: rxiv
            artifact_name: rxiv-maker-macos-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'

      - name: Install additional build dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y upx-ucl

      - name: Install additional build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install upx

      - name: Install PyInstaller
        run: uv pip install pyinstaller

      - name: Get version from setup
        id: get_version
        shell: bash
        run: |
          VERSION="${{ needs.setup.outputs.version-number }}"
          TAG="${{ needs.setup.outputs.tag }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION (tag: $TAG)"

      - name: Create PyInstaller spec file
        shell: bash
        run: |
          cat > rxiv-maker.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import sys
          from pathlib import Path

          block_cipher = None

          # Add the src directory to Python path
          src_path = str(Path.cwd() / 'src')
          if src_path not in sys.path:
              sys.path.insert(0, src_path)

          a = Analysis(
              ['src/rxiv_maker/rxiv_maker_cli.py'],
              pathex=[src_path],
              binaries=[],
              data=[
                  ('src/rxiv_maker/tex', 'rxiv_maker/tex'),
                  ('src/rxiv_maker/install/templates', 'rxiv_maker/install/templates'),
                  ('src/rxiv_maker/utils/schemas', 'rxiv_maker/utils/schemas'),
              ],
              hiddenimports=[
                  'rxiv_maker',
                  'rxiv_maker.cli',
                  'rxiv_maker.commands',
                  'rxiv_maker.converters',
                  'rxiv_maker.processors',
                  'rxiv_maker.utils',
                  'rxiv_maker.validators',
                  'rxiv_maker.install',
                  'pkg_resources.py2_warn',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='${{ matrix.binary_name }}',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF

      - name: Build binary with PyInstaller
        shell: bash
        run: |
          echo "Building binary for ${{ matrix.platform }}-${{ matrix.arch }}..."
          uv run pyinstaller rxiv-maker.spec --clean --noconfirm

          # Verify the binary was created
          if [ -f "dist/${{ matrix.binary_name }}" ]; then
            echo "‚úÖ Binary created successfully: dist/${{ matrix.binary_name }}"
            ls -la dist/
          else
            echo "‚ùå Binary not found in dist/"
            ls -la dist/ || echo "dist/ directory doesn't exist"
            exit 1
          fi

      - name: Test binary functionality
        shell: bash
        run: |
          echo "üß™ Testing binary functionality..."

          # Basic command tests
          echo "Testing basic commands..."
          ./dist/${{ matrix.binary_name }} --version
          ./dist/${{ matrix.binary_name }} --help

          # Test binary imports and core functionality
          echo "Testing binary can initialize a project..."
          mkdir -p test-workspace && cd test-workspace

          # Test init command
          ../dist/${{ matrix.binary_name }} init test-project --no-interactive || echo "Init command failed"

          if [ -d "test-project" ]; then
            echo "‚úÖ Binary can initialize projects"

            # Test that required files were created
            if [ -f "test-project/00_CONFIG.yml" ] && [ -f "test-project/01_MAIN.md" ]; then
              echo "‚úÖ Binary created required project files"
            else
              echo "‚ùå Binary failed to create required files"
              ls -la test-project/
            fi

            # Test validate command (should work without LaTeX)
            cd test-project
            ../../dist/${{ matrix.binary_name }} validate --no-doi || echo "Validation failed (expected without LaTeX)"
            cd ..
          else
            echo "‚ùå Binary failed to initialize project"
          fi

          cd ..
          echo "‚úÖ Binary functionality test completed"

      - name: Compress binary (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd dist
          if command -v upx >/dev/null 2>&1; then
            echo "Compressing binary with UPX..."
            upx --best ${{ matrix.binary_name }} || echo "UPX compression failed, continuing..."
          fi
          tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}
          echo "Created: ${{ matrix.artifact_name }}.tar.gz"

      - name: Compress binary (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd dist
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.artifact_name }}.zip
          Write-Host "Created: ${{ matrix.artifact_name }}.zip"

      - name: Upload binary artifact
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: ${{ matrix.artifact_name }}
          path: |
            dist/${{ matrix.artifact_name }}.tar.gz
            dist/${{ matrix.artifact_name }}.zip
          retention-days: 30

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [setup, test, integrity-check, build-python, build-binaries]
    if: needs.setup.outputs.is-dry-run != 'true'

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_url: ${{ steps.create_release.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from setup
        id: get_version
        run: |
          VERSION="${{ needs.setup.outputs.version-number }}"
          TAG="${{ needs.setup.outputs.tag }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üì¶ Creating release for version: $VERSION (tag: $TAG)"

      - name: Download all artifacts
        uses: ./.github/actions/artifact-management
        with:
          action: download-all
          path: artifacts/
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## üöÄ Rxiv-Maker ${{ steps.get_version.outputs.tag }}

          This release includes pre-compiled binaries for faster installation across platforms.

          ### üì¶ Installation Options

          #### üç∫ Homebrew (macOS/Linux)
          ```bash
          brew tap henriqueslab/rxiv-maker
          brew install rxiv-maker
          ```

          #### ü™£ Scoop (Windows)
          ```powershell
          scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker
          scoop install rxiv-maker
          ```

          #### üêç Python Package (All Platforms)
          ```bash
          pip install rxiv-maker
          ```

          #### üì• Direct Binary Download
          Download the appropriate binary for your platform from the assets below:
          - **Linux x64**: `rxiv-maker-linux-x64.tar.gz`
          - **Windows x64**: `rxiv-maker-windows-x64.zip`
          - **macOS Intel**: `rxiv-maker-macos-x64-intel.tar.gz`
          - **macOS Apple Silicon**: `rxiv-maker-macos-arm64.tar.gz`

          ### üîó Quick Start
          ```bash
          rxiv init my-paper     # Initialize new manuscript
          cd my-paper
          rxiv pdf               # Generate PDF
          ```

          ### üìñ Documentation
          - [Installation Guide](https://github.com/henriqueslab/rxiv-maker#installation)
          - [User Guide](https://github.com/henriqueslab/rxiv-maker#usage)
          - [Examples](https://github.com/henriqueslab/rxiv-maker/tree/main/EXAMPLE_MANUSCRIPT)

          ---
          *Binary distributions are self-contained and don't require Python installation.*
          EOF

      - name: Validate artifacts before release
        run: |
          echo "üîç Validating artifacts structure..."
          echo "Artifacts directory contents:"
          find artifacts/ -type f -exec ls -la {} \; || echo "No artifacts found"

          echo ""
          echo "Checking for required artifact patterns..."

          # Check for python packages
          if ls artifacts/python-packages/* 1> /dev/null 2>&1; then
            echo "‚úÖ Python packages found:"
            ls -la artifacts/python-packages/
          elif ls artifacts/*-*.whl artifacts/*-*.tar.gz 1> /dev/null 2>&1; then
            echo "‚úÖ Python packages found in artifacts root:"
            ls -la artifacts/*-*.whl artifacts/*-*.tar.gz || echo "No Python packages"
          else
            echo "‚ùå No Python packages found"
          fi

          # Check for binary artifacts
          if ls artifacts/*.tar.gz artifacts/*.zip 1> /dev/null 2>&1; then
            echo "‚úÖ Binary artifacts found:"
            ls -la artifacts/*.tar.gz artifacts/*.zip
          else
            echo "‚ùå No binary artifacts found"
          fi

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üöÄ Creating GitHub release..."

          # Build list of artifacts to include
          ARTIFACTS=""

          # Add Python packages (try different possible locations)
          if ls artifacts/python-packages/* 1> /dev/null 2>&1; then
            ARTIFACTS="$ARTIFACTS artifacts/python-packages/*"
          elif ls artifacts/*-*.whl artifacts/*-*.tar.gz 1> /dev/null 2>&1; then
            for file in artifacts/*-*.whl artifacts/*-*.tar.gz; do
              if [[ -f "$file" && "$file" == *"-"*"."* ]]; then
                ARTIFACTS="$ARTIFACTS $file"
              fi
            done
          fi

          # Add binary artifacts
          if ls artifacts/*.tar.gz 1> /dev/null 2>&1; then
            for file in artifacts/*.tar.gz; do
              if [[ -f "$file" && "$file" != *"-"*"."* ]]; then
                ARTIFACTS="$ARTIFACTS $file"
              fi
            done
          fi

          if ls artifacts/*.zip 1> /dev/null 2>&1; then
            ARTIFACTS="$ARTIFACTS artifacts/*.zip"
          fi

          echo "Artifacts to include: $ARTIFACTS"

          if [[ -z "$ARTIFACTS" ]]; then
            echo "‚ùå No artifacts found to include in release"
            exit 1
          fi

          gh release create ${{ steps.get_version.outputs.tag }} \
            --title "Rxiv-Maker ${{ steps.get_version.outputs.tag }}" \
            --notes-file release_notes.md \
            $ARTIFACTS

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, create-release]
    if: needs.setup.outputs.is-dry-run != 'true'
    environment: release

    steps:
      - name: Download Python packages
        uses: ./.github/actions/artifact-management
        with:
          action: download
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Sync Docker Images
  sync-docker-version:
    name: Sync Docker Version
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, create-release]
    if: needs.setup.outputs.is-dry-run != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from setup
        id: get_version
        run: |
          VERSION="${{ needs.setup.outputs.version-number }}"
          TAG="${{ needs.setup.outputs.tag }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "üê≥ Syncing Docker images for version: $VERSION"

      - name: Trigger Docker image build
        run: |
          echo "Triggering Docker image build for release ${{ steps.get_version.outputs.tag }}"

          # Add rate limiting to prevent API abuse detection
          sleep 2

          # Use DOCKER_SYNC_TOKEN if available, otherwise fall back to GITHUB_TOKEN
          if [ -n "${{ secrets.DOCKER_SYNC_TOKEN }}" ]; then
            AUTH_TOKEN="${{ secrets.DOCKER_SYNC_TOKEN }}"
            echo "Using dedicated DOCKER_SYNC_TOKEN for Docker repository dispatch..."
          else
            AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            echo "Using fallback GITHUB_TOKEN for Docker repository dispatch..."
            echo "‚ö†Ô∏è For better security, consider setting DOCKER_SYNC_TOKEN secret"
          fi

          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $AUTH_TOKEN" \
            -H "User-Agent: rxiv-maker-sync" \
            -w "HTTP_CODE:%{http_code}" \
            -s \
            https://api.github.com/repos/HenriquesLab/docker-rxiv-maker/dispatches \
            -d '{
              "event_type": "build-docker-image",
              "client_payload": {
                "version": "${{ steps.get_version.outputs.version }}",
                "source_repo": "${{ github.repository }}",
                "source_commit": "${{ github.sha }}",
                "trigger_type": "release_sync"
              }
            }' 2>&1)

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)

          if [ "$HTTP_CODE" = "204" ]; then
            echo "‚úÖ Successfully triggered Docker image build"
          elif [ "$HTTP_CODE" = "401" ]; then
            echo "‚ùå Authentication failed - check DOCKER_SYNC_TOKEN or GITHUB_TOKEN permissions"
            echo "Response: $RESPONSE"
            # Don't fail the release for Docker sync issues
            echo "‚ö†Ô∏è Docker sync failed but continuing with release"
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "‚ùå Repository not found or no dispatch permission"
            echo "Response: $RESPONSE"
            echo "‚ö†Ô∏è Docker sync failed but continuing with release"
          else
            echo "‚ö†Ô∏è Unexpected response from GitHub API (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE"
            echo "Continuing with release..."
          fi

      - name: Docker sync summary
        run: |
          echo "## üê≥ Docker Version Sync" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: Triggered Docker image build for release" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Image**: henriqueslab/rxiv-maker-base:v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Monitor Docker build at [docker-rxiv-maker actions](https://github.com/HenriquesLab/docker-rxiv-maker/actions)" >> $GITHUB_STEP_SUMMARY

  # Package Manager Updates
  update-package-managers:
    name: Update Package Managers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [setup, create-release, sync-docker-version]
    if: needs.setup.outputs.is-dry-run != 'true' && needs.setup.outputs.skip-package-managers != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          install-python-deps: false

      - name: Install orchestration dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests pyyaml

      - name: Get release information
        id: release_info
        run: |
          VERSION="${{ needs.setup.outputs.version-number }}"
          TAG="${{ needs.setup.outputs.tag }}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          echo "üì¶ Updating package managers for version: $VERSION"

          # Get release assets from GitHub
          RELEASE_URL="${{ needs.create-release.outputs.release_url }}"
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

      - name: Update Homebrew Formula
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "üç∫ Triggering Homebrew formula update..."

          # Add rate limiting to prevent API abuse
          sleep 3

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "User-Agent: rxiv-maker-release" \
            https://api.github.com/repos/henriqueslab/homebrew-rxiv-maker/dispatches \
            -d '{
              "event_type": "update-formula",
              "client_payload": {
                "version": "${{ steps.release_info.outputs.version }}",
                "tag": "${{ steps.release_info.outputs.tag }}",
                "source_repo": "${{ github.repository }}",
                "release_url": "${{ steps.release_info.outputs.release_url }}"
              }
            }' || echo "‚ö†Ô∏è Homebrew update failed"

      - name: Update Scoop Manifest
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "ü™£ Triggering Scoop manifest update..."

          # Add rate limiting to prevent API abuse
          sleep 3

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "User-Agent: rxiv-maker-release" \
            https://api.github.com/repos/henriqueslab/scoop-rxiv-maker/dispatches \
            -d '{
              "event_type": "update-formula",
              "client_payload": {
                "version": "${{ steps.release_info.outputs.version }}",
                "tag": "${{ steps.release_info.outputs.tag }}",
                "source_repo": "${{ github.repository }}",
                "release_url": "${{ steps.release_info.outputs.release_url }}"
              }
            }' || echo "‚ö†Ô∏è Scoop update failed"

      - name: Verify package manager updates
        continue-on-error: true
        run: |
          echo "üîç Verifying package manager updates..."

          # Wait a moment for dispatches to process
          sleep 30

          # Check if workflows were triggered (basic verification)
          echo "Package manager update dispatches sent successfully"
          echo "Monitor progress at:"
          echo "  - Homebrew: https://github.com/henriqueslab/homebrew-rxiv-maker/actions"
          echo "  - Scoop: https://github.com/henriqueslab/scoop-rxiv-maker/actions"

      - name: Create package manager summary
        if: always()
        run: |
          echo "## üì¶ Package Manager Updates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.release_info.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ steps.release_info.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üöÄ Repository Dispatch Sent" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Update triggers sent to package manager repositories:" >> $GITHUB_STEP_SUMMARY
          echo "- üç∫ **Homebrew**: Repository dispatch sent to henriqueslab/homebrew-rxiv-maker" >> $GITHUB_STEP_SUMMARY
          echo "- ü™£ **Scoop**: Repository dispatch sent to henriqueslab/scoop-rxiv-maker" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Package managers will update automatically via their workflows." >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Homebrew (macOS/Linux):**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'brew tap henriqueslab/rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo 'brew install rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scoop (Windows):**" >> $GITHUB_STEP_SUMMARY
          echo '```powershell' >> $GITHUB_STEP_SUMMARY
          echo 'scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo 'scoop install rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Handle package manager failures
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ùå Package manager updates failed"
          echo ""
          echo "This is not a critical failure for the release itself."
          echo "The GitHub release and PyPI package have been published successfully."
          echo "Package manager updates can be triggered manually if needed."
          echo ""
          echo "Manual update commands:"
          echo "  Homebrew: gh workflow run update-formula.yml -R henriqueslab/homebrew-rxiv-maker --field version=${{ steps.get_version.outputs.version }}"
          echo "  Scoop: gh workflow run update-manifest.yml -R henriqueslab/scoop-rxiv-maker --field version=${{ steps.get_version.outputs.version }}"

          echo "## ‚ö†Ô∏è  Package Manager Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The main release was successful, but package manager updates failed." >> $GITHUB_STEP_SUMMARY
          echo "The GitHub release and PyPI package are available." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Manual package manager updates may be required:" >> $GITHUB_STEP_SUMMARY
          echo "- Check workflow logs for specific errors" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger updates manually using the GitHub Actions UI" >> $GITHUB_STEP_SUMMARY
          echo "- Contact maintainers if issues persist" >> $GITHUB_STEP_SUMMARY

  # Release Summary
  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup, test, integrity-check, build-python, build-binaries, create-release, publish-pypi, sync-docker-version, update-package-managers]
    if: always()

    steps:
      - name: Generate release summary
        run: |
          echo "# üöÄ Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.setup.outputs.version-number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag**: ${{ needs.setup.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run**: ${{ needs.setup.outputs.is-dry-run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job results
          jobs=(
            "setup:Setup & Version Management"
            "test:Comprehensive Testing"
            "integrity-check:Repository Integrity"
            "build-python:Python Package Build"
            "build-binaries:Cross-Platform Binaries"
            "create-release:GitHub Release"
            "publish-pypi:PyPI Publishing"
            "sync-docker-version:Docker Image Sync"
            "update-package-managers:Package Manager Updates"
          )

          for job_info in "${jobs[@]}"; do
            job_name="${job_info%%:*}"
            job_title="${job_info#*:}"

            # Get job result using needs context
            case $job_name in
              "setup") result="${{ needs.setup.result }}" ;;
              "test") result="${{ needs.test.result }}" ;;
              "integrity-check") result="${{ needs.integrity-check.result }}" ;;
              "build-python") result="${{ needs.build-python.result }}" ;;
              "build-binaries") result="${{ needs.build-binaries.result }}" ;;
              "create-release") result="${{ needs.create-release.result }}" ;;
              "publish-pypi") result="${{ needs.publish-pypi.result }}" ;;
              "sync-docker-version") result="${{ needs.sync-docker-version.result }}" ;;
              "update-package-managers") result="${{ needs.update-package-managers.result }}" ;;
            esac

            case $result in
              "success") echo "‚úÖ **$job_title**: Completed successfully" >> $GITHUB_STEP_SUMMARY ;;
              "failure") echo "‚ùå **$job_title**: Failed" >> $GITHUB_STEP_SUMMARY ;;
              "cancelled") echo "‚ö†Ô∏è **$job_title**: Cancelled" >> $GITHUB_STEP_SUMMARY ;;
              "skipped") echo "‚è≠Ô∏è **$job_title**: Skipped" >> $GITHUB_STEP_SUMMARY ;;
              *) echo "‚ùì **$job_title**: $result" >> $GITHUB_STEP_SUMMARY ;;
            esac
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.setup.result }}" == "success" &&
                ("${{ needs.test.result }}" == "success" || "${{ needs.setup.outputs.skip-tests }}" == "true") &&
                ("${{ needs.integrity-check.result }}" == "success" || "${{ needs.setup.outputs.skip-tests }}" == "true") &&
                "${{ needs.build-python.result }}" == "success" &&
                "${{ needs.build-binaries.result }}" == "success" &&
                ("${{ needs.create-release.result }}" == "success" || "${{ needs.setup.outputs.is-dry-run }}" == "true") ]]; then
            echo "## üéâ Release Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.setup.outputs.is-dry-run }}" == "true" ]; then
              echo "‚úÖ **Dry run completed successfully** - No artifacts published" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ **Release ${{ needs.setup.outputs.tag }} published successfully!**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üì¶ Available Now" >> $GITHUB_STEP_SUMMARY
              echo "- **GitHub Release**: [View Release](${{ needs.create-release.outputs.release_url }})" >> $GITHUB_STEP_SUMMARY
              echo "- **PyPI Package**: \`pip install rxiv-maker==${{ needs.setup.outputs.version-number }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Docker Image**: \`henriqueslab/rxiv-maker-base:v${{ needs.setup.outputs.version-number }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üìã Package Managers (Updating)" >> $GITHUB_STEP_SUMMARY
              echo "- **Homebrew**: \`brew install henriqueslab/rxiv-maker/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
              echo "- **Scoop**: \`scoop install henriqueslab/rxiv-maker\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ‚ùå Release Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The release pipeline encountered failures. Please check the job details above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify completion
        if: always()
        run: |
          echo "üöÄ Release pipeline completed for ${{ needs.setup.outputs.tag }}"
          echo "Check the summary above for detailed results."
