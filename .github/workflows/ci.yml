name: CI

on:
  pull_request:
    branches: [main, dev]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/ci.yml'
      - '.pre-commit-config.yaml'

  # Manual trigger for comprehensive testing including system tests
  workflow_dispatch:
    inputs:
      run_system_tests:
        description: 'Run system tests (container-based)'
        required: false
        default: true
        type: boolean

# Minimal permissions by default
permissions:
  contents: read

# Cancel previous runs on same PR
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  UV_SYSTEM_PYTHON: 1
  PYTHONIOENCODING: utf-8

jobs:
  # Stage 1: Fast unit tests (no external dependencies)
  unit-tests:
    name: Unit Tests (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ci-unit-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ci-unit-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install pytest pytest-xdist pytest-cov

      - name: Run linting
        run: |
          echo "🔍 Running linting checks..."
          uv run ruff check src/ tests/
          uv run ruff format --check src/ tests/
          echo "✅ Linting passed"

      - name: Run unit tests
        run: |
          echo "🧪 Running fast unit tests..."
          uv run pytest tests/unit/ -m "unit and fast and not ci_exclude" \
            --cov=src --cov-report=term-missing:skip-covered -x \
            --tb=short --durations=10
          echo "✅ Unit tests passed"

  # Stage 2: Integration tests with conditional execution
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ci-integration-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ci-integration-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install pytest pytest-xdist pytest-cov pytest-timeout

      - name: Run integration tests (no LaTeX required)
        run: |
          echo "🧪 Running integration tests..."
          uv run pytest tests/integration/ -m "integration and not requires_latex and not requires_docker" \
            --cov=src --cov-report=term-missing:skip-covered \
            --maxfail=5 --tb=short --durations=10
          echo "✅ Integration tests passed"

  # Stage 3: Package build validation
  build-validation:
    name: Build & Package Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install build twine

      - name: Build package
        run: |
          echo "📦 Building package..."
          uv run python -m build
          echo "✅ Package built successfully"

      - name: Validate package
        run: |
          echo "🔍 Validating package..."
          uv run twine check dist/*
          echo "✅ Package validation passed"

  # Stage 4: System tests (manual trigger or when system files change)
  system-tests:
    name: System Tests (Container-based)
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    # Only run system tests when:
    # 1. Manually triggered with run_system_tests=true, OR
    # 2. When system test files change in a PR
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.run_system_tests) ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.changed_files, 'tests/system/'))
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        engine: [docker]  # Start with Docker, can add Podman later

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Docker
        run: |
          echo "🐳 Docker is pre-installed on GitHub Actions runners"
          docker --version

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 'latest'
          enable-cache: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ci-system-${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
          restore-keys: |
            ci-system-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --frozen
          uv pip install nox

      - name: Run system tests
        env:
          RXIV_ENGINE: ${{ matrix.engine }}
        run: |
          echo "🧪 Running system tests with ${{ matrix.engine }} engine..."
          nox -s test_system
          echo "✅ System tests passed"

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build-validation, system-tests]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Multi-Stage CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Validation | ${{ needs.build-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| System Tests | ${{ needs.system-tests.result == 'success' && '✅ Passed' || (needs.system-tests.result == 'skipped' && '⏭️ Skipped') || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status (system tests are optional)
          REQUIRED_JOBS_PASSED=${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.build-validation.result == 'success' }}
          SYSTEM_TESTS_OK=${{ needs.system-tests.result == 'success' || needs.system-tests.result == 'skipped' }}

          if [[ "$REQUIRED_JOBS_PASSED" == "true" && "$SYSTEM_TESTS_OK" == "true" ]]; then
            echo "🎉 **All CI stages passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some CI stages failed - see individual job logs**" >> $GITHUB_STEP_SUMMARY
          fi
