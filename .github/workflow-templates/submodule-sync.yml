name: Submodule Sync Template
# This is a reusable workflow template for synchronizing submodules with main repository changes

on:
  repository_dispatch:
    types: [sync-submodule]
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source repository that triggered the sync'
        required: false
        type: string
      source_commit:
        description: 'Source commit SHA'
        required: false
        type: string
      sync_type:
        description: 'Type of synchronization'
        required: false
        default: 'manual'
        type: choice
        options:
          - 'manual'
          - 'version_change'
          - 'release'

env:
  FORCE_COLOR: 1

jobs:
  sync-submodule:
    name: Sync Submodule
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout submodule repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.SYNC_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup environment
        uses: henriqueslab/rxiv-maker/.github/actions/setup-environment@main
        with:
          python-version: '3.11'
          install-python-deps: false

      - name: Extract sync information
        id: sync-info
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            SOURCE_REPO="${{ github.event.client_payload.source_repo }}"
            SOURCE_COMMIT="${{ github.event.client_payload.source_commit }}"
            SYNC_TYPE="${{ github.event.client_payload.sync_type }}"
            VERSION="${{ github.event.client_payload.version }}"
          else
            SOURCE_REPO="${{ inputs.source_repo }}"
            SOURCE_COMMIT="${{ inputs.source_commit }}"
            SYNC_TYPE="${{ inputs.sync_type }}"
            VERSION=""
          fi

          echo "source_repo=${SOURCE_REPO}" >> $GITHUB_OUTPUT
          echo "source_commit=${SOURCE_COMMIT}" >> $GITHUB_OUTPUT
          echo "sync_type=${SYNC_TYPE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

          echo "## 🔄 Submodule Sync Triggered" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Repository**: ${SOURCE_REPO}" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Commit**: ${SOURCE_COMMIT}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sync Type**: ${SYNC_TYPE}" >> $GITHUB_STEP_SUMMARY
          if [ -n "$VERSION" ]; then
            echo "- **Version**: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Update submodule reference
        run: |
          echo "Updating submodule reference for sync type: ${{ steps.sync-info.outputs.sync_type }}"

          # Add main repository as remote if not already present
          if ! git remote | grep -q "main-repo"; then
            git remote add main-repo https://github.com/${{ steps.sync-info.outputs.source_repo }}.git
          fi

          # Fetch latest changes from main repository
          git fetch main-repo

          # Update submodule reference based on sync type
          case "${{ steps.sync-info.outputs.sync_type }}" in
            "version_change"|"release")
              echo "Syncing for version/release changes"
              git merge main-repo/main --no-edit || echo "Merge completed with conflicts resolved"
              ;;
            "manual")
              echo "Manual sync requested"
              git merge main-repo/main --no-edit || echo "Merge completed with conflicts resolved"
              ;;
            *)
              echo "Unknown sync type, performing default merge"
              git merge main-repo/main --no-edit || echo "Merge completed with conflicts resolved"
              ;;
          esac

      - name: Validate submodule state
        run: |
          echo "Validating submodule state after sync..."

          # Run basic validation checks
          if [ -f "pyproject.toml" ]; then
            echo "Python project detected, running basic validation"
            python -m pip install --upgrade pip
            pip install -e . || echo "Package installation failed, continuing..."
          fi

          # Check for common issues
          if [ -f "Dockerfile" ]; then
            echo "Docker configuration detected"
            docker --version || echo "Docker not available in CI"
          fi

          echo "✅ Submodule validation completed"

      - name: Commit and push changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
          else
            echo "Committing submodule sync changes"
            git add -A
            git commit -m "Sync with main repository

            Source: ${{ steps.sync-info.outputs.source_repo }}
            Commit: ${{ steps.sync-info.outputs.source_commit }}
            Type: ${{ steps.sync-info.outputs.sync_type }}

            🤖 Automated submodule sync"

            git push origin main
            echo "✅ Changes pushed successfully"
          fi

      - name: Trigger downstream builds
        if: steps.sync-info.outputs.sync_type == 'version_change' || steps.sync-info.outputs.sync_type == 'release'
        run: |
          echo "Triggering downstream builds for ${{ steps.sync-info.outputs.sync_type }}"

          # Example: Trigger Docker builds, package updates, etc.
          # This section should be customized per submodule

          if [ "${{ steps.sync-info.outputs.sync_type }}" = "version_change" ]; then
            echo "Version change detected, triggering related workflows"
            # Add specific actions for version changes
          fi

          if [ "${{ steps.sync-info.outputs.sync_type }}" = "release" ]; then
            echo "Release sync detected, triggering release workflows"
            # Add specific actions for releases
          fi

      - name: Sync summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

          if [ "${{ job.status }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Submodule sync completed successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Submodule sync failed**" >> $GITHUB_STEP_SUMMARY
            echo "Check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
          fi
