name: 'Retry Action'
description: 'Execute a command with exponential backoff retry logic'
inputs:
  command:
    description: 'Command to execute'
    required: true
  max-attempts:
    description: 'Maximum number of attempts'
    required: false
    default: '3'
  retry-delay:
    description: 'Initial retry delay in seconds'
    required: false
    default: '5'
  shell:
    description: 'Shell to use (bash or powershell)'
    required: false
    default: 'bash'

runs:
  using: 'composite'
  steps:
    - name: Create command script
      shell: bash
      run: |
        # Create the command script
        cat > /tmp/retry_command.sh << 'EOF'
        ${{ inputs.command }}
        EOF
        chmod +x /tmp/retry_command.sh

    - name: Execute with retry (Bash)
      if: inputs.shell == 'bash'
      shell: bash
      run: |
        # Bash retry logic
        attempt=1
        max_attempts=${{ inputs.max-attempts }}
        delay=${{ inputs.retry-delay }}

        while [ $attempt -le $max_attempts ]; do
          echo "🔄 Attempt $attempt of $max_attempts..."

          if bash /tmp/retry_command.sh; then
            echo "✅ Command succeeded on attempt $attempt"
            exit 0
          else
            exit_code=$?
            echo "❌ Command failed with exit code $exit_code"

            if [ $attempt -lt $max_attempts ]; then
              echo "⏳ Waiting ${delay}s before retry..."
              sleep $delay
              # Exponential backoff
              delay=$((delay * 2))
            else
              echo "❌ All attempts failed"
              exit $exit_code
            fi
          fi

          attempt=$((attempt + 1))
        done

    - name: Execute with retry (PowerShell)
      if: inputs.shell == 'powershell'
      shell: powershell
      run: |
        # PowerShell retry logic
        $attempt = 1
        $maxAttempts = ${{ inputs.max-attempts }}
        $delay = ${{ inputs.retry-delay }}

        while ($attempt -le $maxAttempts) {
          Write-Host "🔄 Attempt $attempt of $maxAttempts..."

          try {
            Invoke-Expression @"
        ${{ inputs.command }}
        "@
            Write-Host "✅ Command succeeded on attempt $attempt"
            exit 0
          } catch {
            $exitCode = $LASTEXITCODE
            if ($exitCode -eq 0) { $exitCode = 1 }
            Write-Host "❌ Command failed: $_"

            if ($attempt -lt $maxAttempts) {
              Write-Host "⏳ Waiting ${delay}s before retry..."
              Start-Sleep -Seconds $delay
              # Exponential backoff
              $delay = $delay * 2
            } else {
              Write-Host "❌ All attempts failed"
              exit $exitCode
            }
          }

          $attempt++
        }
