name: 'Setup Development Environment'
description: 'Unified setup for Python, UV, and system dependencies across workflows'
inputs:
  python-version:
    description: 'Python version to install'
    required: false
    default: '3.11'
  enable-cache:
    description: 'Enable UV cache'
    required: false
    default: 'true'
  cache-suffix:
    description: 'Additional cache key suffix'
    required: false
    default: ''
  install-system-deps:
    description: 'Install system dependencies'
    required: false
    default: 'true'
  install-python-deps:
    description: 'Install Python dependencies with UV'
    required: false
    default: 'true'
  install-latex:
    description: 'Install LaTeX for local PDF generation (macOS/Windows only, Linux uses Docker)'
    required: false
    default: 'false'

outputs:
  python-version:
    description: 'Installed Python version'
    value: ${{ steps.setup-python.outputs.python-version }}
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.setup-uv.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install UV with optimized caching
      id: setup-uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "0.8.5"  # Pin to specific version for stability
        enable-cache: ${{ inputs.enable-cache == 'true' && 'true' || 'false' }}
        cache-suffix: ${{ inputs.cache-suffix != '' && format('{0}-v3', inputs.cache-suffix) || 'shared-v3' }}  # v3 to invalidate old caches, consolidated keys
        cache-dependency-glob: "**/uv.lock"
        prune-cache: true  # Enable pruning to reduce cache size
        cache-local-path: ${{ runner.temp }}/uv-cache  # Centralized cache location
        ignore-nothing-to-cache: true
      continue-on-error: true  # Don't fail on cache issues

    - name: Fallback UV installation on cache failure
      if: failure() && inputs.enable-cache == 'true'
      uses: astral-sh/setup-uv@v4
      with:
        version: "0.8.5"
        enable-cache: false  # Disable cache entirely on fallback
      continue-on-error: false

    - name: Set UV environment variables for optimized caching
      shell: bash
      run: |
        # Set UV cache directory to a predictable location with size limits
        if [ "${{ inputs.enable-cache }}" = "true" ]; then
          echo "UV_CACHE_DIR=${{ runner.temp }}/uv-cache" >> $GITHUB_ENV
          echo "UV_CACHE_MAX_SIZE=500MB" >> $GITHUB_ENV  # Limit cache size
          mkdir -p "${{ runner.temp }}/uv-cache"
        else
          echo "UV_NO_CACHE=1" >> $GITHUB_ENV
        fi

        # Add UV configuration for better stability and reduced cache footprint
        echo "UV_SYSTEM_PYTHON=1" >> $GITHUB_ENV
        echo "UV_COMPILE_BYTECODE=1" >> $GITHUB_ENV
        echo "UV_NO_PROGRESS=1" >> $GITHUB_ENV  # Reduce log verbosity

    - name: Install system dependencies (Linux)
      if: inputs.install-system-deps == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        echo "üêß Installing Linux system dependencies..."

        # Update package lists with retry
        for attempt in 1 2 3; do
          echo "Updating package lists (attempt $attempt)..."
          if sudo apt-get update; then
            echo "‚úÖ Package lists updated successfully"
            break
          else
            echo "‚ö†Ô∏è Package update failed, retrying in 5 seconds..."
            sleep 5
          fi
        done

        # Install dependencies with fallbacks
        ESSENTIAL_DEPS="build-essential git pkg-config"
        IMAGE_DEPS="libfreetype6-dev libjpeg-dev libpng-dev libtiff-dev libwebp-dev"
        OPTIONAL_DEPS="libopenjp2-7-dev zlib1g-dev liblcms2-dev libffi-dev"

        # Install essential dependencies first
        echo "Installing essential dependencies..."
        if ! sudo apt-get install -y $ESSENTIAL_DEPS; then
          echo "‚ùå Failed to install essential dependencies"
          exit 1
        fi

        # Try to install image processing libraries
        echo "Installing image processing dependencies..."
        sudo apt-get install -y $IMAGE_DEPS || echo "‚ö†Ô∏è Some image processing libraries failed to install"

        # Try optional dependencies
        echo "Installing optional dependencies..."
        for dep in $OPTIONAL_DEPS; do
          sudo apt-get install -y $dep || echo "‚ö†Ô∏è Optional dependency $dep failed to install"
        done

        echo "‚úÖ Linux system dependencies installation completed"

    - name: Install system dependencies (macOS)
      if: inputs.install-system-deps == 'true' && runner.os == 'macOS'
      shell: bash
      run: |
        echo "üçé Installing macOS system dependencies with cache optimization..."

        # Skip Homebrew update to reduce cache usage and speed up builds
        echo "‚ÑπÔ∏è Skipping Homebrew update to minimize cache footprint"

        # Essential dependencies only - remove optional deps to reduce cache
        ESSENTIAL_DEPS="pkg-config freetype jpeg libpng"
        # Removed optional dependencies to minimize Homebrew cache usage

        # Install essential dependencies only
        echo "Installing minimal essential dependencies..."
        for dep in $ESSENTIAL_DEPS; do
          if ! brew list $dep &>/dev/null; then
            echo "Installing $dep..."
            brew install $dep || echo "‚ö†Ô∏è Failed to install $dep, continuing..."
          else
            echo "‚úÖ $dep already installed"
          fi
        done

        echo "‚úÖ macOS system dependencies installation completed (cache-optimized)"

    - name: Install LaTeX (macOS)
      if: inputs.install-latex == 'true' && runner.os == 'macOS'
      shell: bash
      run: |
        echo "üçé Installing LaTeX for macOS..."

        # Use only BasicTeX to minimize cache usage (smaller package)
        LATEX_PACKAGES=("basictex")

        for package in "${LATEX_PACKAGES[@]}"; do
          echo "Attempting to install $package..."
          if brew install --cask "$package"; then
            echo "‚úÖ Successfully installed $package"

            # Update PATH to include LaTeX executables
            if [[ -d "/usr/local/texlive" ]]; then
              # Find the latest TexLive installation
              TEXLIVE_PATH=$(find /usr/local/texlive -name "bin" -type d | grep -E "x86_64-darwin|universal-darwin" | head -1)
              if [[ -n "$TEXLIVE_PATH" ]]; then
                echo "Adding TexLive to PATH: $TEXLIVE_PATH"
                echo "$TEXLIVE_PATH" >> $GITHUB_PATH
              fi
            fi

            # Also check /Library/TeX/texbin (common MacTeX location)
            if [[ -d "/Library/TeX/texbin" ]]; then
              echo "Adding MacTeX to PATH: /Library/TeX/texbin"
              echo "/Library/TeX/texbin" >> $GITHUB_PATH
            fi

            # Verify installation
            sleep 5  # Give time for PATH to update
            export PATH="/Library/TeX/texbin:$PATH"
            if pdflatex --version >/dev/null 2>&1; then
              echo "‚úÖ pdflatex is accessible"
              pdflatex --version | head -1
              break
            else
              echo "‚ö†Ô∏è pdflatex not yet accessible, checking next package..."
            fi
          else
            echo "‚ö†Ô∏è Failed to install $package, trying next option..."
          fi
        done

        # Final verification
        export PATH="/Library/TeX/texbin:$PATH"
        if pdflatex --version >/dev/null 2>&1; then
          echo "‚úÖ LaTeX installation completed successfully"
          echo "RXIV_ENGINE=LOCAL" >> $GITHUB_ENV
        else
          echo "‚ùå LaTeX installation failed - pdflatex not accessible"
          echo "Available in PATH:"
          echo $PATH
          echo "Checking common locations:"
          ls -la /Library/TeX/texbin/ 2>/dev/null || echo "  /Library/TeX/texbin not found"
          ls -la /usr/local/texlive/ 2>/dev/null || echo "  /usr/local/texlive not found"
          exit 1
        fi

    - name: Install system dependencies (Windows)
      if: inputs.install-system-deps == 'true' && runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "ü™ü Installing Windows system dependencies..."

        # Check if chocolatey is available
        $chocoAvailable = $false
        try {
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Chocolatey is already installed"
            $chocoAvailable = $true
          } else {
            Write-Host "Installing Chocolatey..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

            # Try to install Chocolatey with timeout
            $timeout = 300  # 5 minutes
            $job = Start-Job -ScriptBlock {
              iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            }

            if (Wait-Job $job -Timeout $timeout) {
              Receive-Job $job
              $chocoAvailable = $true
              Write-Host "‚úÖ Chocolatey installed successfully"
            } else {
              Write-Host "‚ö†Ô∏è Chocolatey installation timed out"
              Remove-Job $job -Force
            }
          }
        } catch {
          Write-Host "‚ö†Ô∏è Failed to install Chocolatey: $($_.Exception.Message)"
        }

        # Try to install essential packages if Chocolatey is available
        if ($chocoAvailable) {
          $essentialPackages = @("git", "7zip")
          foreach ($package in $essentialPackages) {
            try {
              Write-Host "Installing $package..."
              choco install $package -y --no-progress --timeout=300
            } catch {
              Write-Host "‚ö†Ô∏è Failed to install ${package}: $($_.Exception.Message)"
            }
          }
        } else {
          Write-Host "‚ö†Ô∏è Skipping package installation due to Chocolatey issues"
        }

        Write-Host "‚úÖ Windows system dependencies configuration completed"

    - name: Install LaTeX (Windows)
      if: inputs.install-latex == 'true' && runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "ü™ü Installing LaTeX for Windows..."

        # Check if chocolatey is available (should be from previous step)
        $chocoAvailable = $false
        try {
          if (Get-Command choco -ErrorAction SilentlyContinue) {
            Write-Host "‚úÖ Chocolatey is available"
            $chocoAvailable = $true
          } else {
            Write-Host "Installing Chocolatey for LaTeX installation..."
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            $chocoAvailable = $true
          }
        } catch {
          Write-Host "‚ùå Failed to set up Chocolatey: $($_.Exception.Message)"
          exit 1
        }

        if ($chocoAvailable) {
          Write-Host "Installing MiKTeX..."
          try {
            # Install MiKTeX with basic package set
            choco install miktex --params="/Set:basic" -y --no-progress --timeout=1800

            # Refresh environment to get new PATH
            $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

            # Common MiKTeX installation paths
            $miktexPaths = @(
              "${env:ProgramFiles}\MiKTeX\miktex\bin\x64",
              "${env:ProgramFiles(x86)}\MiKTeX\miktex\bin",
              "${env:LOCALAPPDATA}\Programs\MiKTeX\miktex\bin\x64"
            )

            foreach ($path in $miktexPaths) {
              if (Test-Path $path) {
                Write-Host "Adding MiKTeX to PATH: $path"
                $env:Path = "$path;$env:Path"

                # Also add to GitHub PATH for subsequent steps
                echo $path | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
              }
            }

            # Configure MiKTeX for automatic package installation
            Write-Host "Configuring MiKTeX..."
            Start-Sleep -Seconds 10  # Give MiKTeX time to initialize

            # Try to find miktex-console or initexmf
            $miktexConsole = Get-Command "initexmf" -ErrorAction SilentlyContinue
            if ($miktexConsole) {
              Write-Host "Configuring automatic package installation..."
              & initexmf --set-config-value=[MPM]AutoInstall=1 2>$null || Write-Host "Config failed, continuing..."
              & initexmf --update-fndb 2>$null || Write-Host "FNDB update failed, continuing..."
            }

            # Verify pdflatex installation
            Start-Sleep -Seconds 5
            try {
              $version = & pdflatex --version 2>$null
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ pdflatex is accessible"
                Write-Host "Version: $($version[0])"

                # Set environment variable for rxiv-maker
                echo "RXIV_ENGINE=LOCAL" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
                Write-Host "‚úÖ LaTeX installation completed successfully"
              } else {
                throw "pdflatex not accessible"
              }
            } catch {
              Write-Host "‚ùå LaTeX installation verification failed"
              Write-Host "PATH: $env:Path"
              Write-Host "Checking common locations:"
              foreach ($path in $miktexPaths) {
                if (Test-Path $path) {
                  Write-Host "  Found: $path"
                  Get-ChildItem $path -Name "pdflatex*" | ForEach-Object { Write-Host "    $_" }
                } else {
                  Write-Host "  Not found: $path"
                }
              }
              exit 1
            }

          } catch {
            Write-Host "‚ùå Failed to install MiKTeX: $($_.Exception.Message)"
            exit 1
          }
        } else {
          Write-Host "‚ùå Cannot install LaTeX without Chocolatey"
          exit 1
        }

    - name: Configure LaTeX engine preference (Linux - Docker)
      if: inputs.install-latex == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        echo "üêß Configuring Docker engine for Linux LaTeX processing..."
        echo "RXIV_ENGINE=DOCKER" >> $GITHUB_ENV
        echo "‚úÖ Linux configured to use Docker for LaTeX (henriqueslab/rxiv-maker-base)"

    - name: Install Python dependencies with enhanced retry
      if: inputs.install-python-deps == 'true'
      shell: bash
      run: |
        set +e  # Don't exit on error immediately

        echo "Installing Python dependencies..."
        echo "UV version: $(uv --version || echo 'UV not found')"
        echo "Python version: $(python --version)"
        echo "Working directory: $(pwd)"

        # Function to try UV sync with different strategies
        try_uv_sync() {
          echo "Attempting UV sync (attempt $1)..."

          # Clear any existing virtual environment
          rm -rf .venv || true

          # Try sync with verbose output
          if uv sync --verbose; then
            echo "‚úÖ UV sync successful"
            return 0
          fi

          echo "‚ö†Ô∏è UV sync failed, trying alternative approaches..."

          # Try with fresh lock file resolution
          if uv lock --upgrade && uv sync --verbose; then
            echo "‚úÖ UV sync with lock upgrade successful"
            return 0
          fi

          # Try manual pip-style installation
          if uv venv && uv pip install -e . --verbose; then
            echo "‚úÖ UV manual installation successful"
            return 0
          fi

          return 1
        }

        # Try UV installation with retries
        success=false
        for attempt in 1 2 3; do
          if try_uv_sync $attempt; then
            success=true
            break
          fi
          echo "Attempt $attempt failed, waiting 10 seconds..."
          sleep 10
        done

        if [ "$success" = false ]; then
          echo "‚ö†Ô∏è UV installation failed, falling back to pip..."
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e . || {
            echo "‚ùå All installation methods failed"
            exit 1
          }
        fi

        echo "‚úÖ Python dependencies installed successfully"

    - name: Verify CLI installation with comprehensive checks
      if: inputs.install-python-deps == 'true'
      shell: bash
      run: |
        echo "üîç Verifying CLI installation..."

        # Check virtual environment
        if [ -d ".venv" ]; then
          echo "‚úÖ Virtual environment found: .venv"
          source .venv/bin/activate 2>/dev/null || true
        else
          echo "‚ö†Ô∏è No virtual environment found"
        fi

        # Test UV run command
        if uv run rxiv --version 2>/dev/null; then
          echo "‚úÖ UV run rxiv command works"
        else
          echo "‚ö†Ô∏è UV run rxiv command failed - this may be expected"
        fi

        # Test Python import
        if python -c "import rxiv_maker; print('‚úÖ rxiv_maker package import successful')" 2>/dev/null; then
          echo "‚úÖ Python import test passed"
        else
          echo "‚ö†Ô∏è Python import test failed - checking installation..."
          # Try alternate import paths
          if uv run python -c "import rxiv_maker; print('‚úÖ UV Python import successful')" 2>/dev/null; then
            echo "‚úÖ UV Python environment works"
          else
            echo "‚ùå Package import still failing"
            # List installed packages for debugging
            echo "Installed packages:"
            uv pip list 2>/dev/null | head -10 || pip list 2>/dev/null | head -10 || echo "Could not list packages"
            # Don't fail here as this is often expected in CI
          fi
        fi

        echo "‚úÖ CLI verification completed (warnings are often expected in CI)"
